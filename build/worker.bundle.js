/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	eval("var commands = {  },\n    $_symbol17_$ = __webpack_require__(764),\n    sibilant = $_symbol17_$.sibilant,\n    $_symbol17_$ = undefined;\ncommands.sibilize = (function commands$sibilize$(sibilantCode) {\n  /* commands.sibilize worker.sibilant:4:0 */\n\n  return sibilant.sibilize(sibilantCode);\n});\nvar onMessage = (function onMessage$(e) {\n  /* on-message worker.sibilant:7:0 */\n\n  var identifier = e.data[0],\n      command = e.data[1],\n      data = e.data[2],\n      commandFn = commands[command],\n      returnValue = {  };\n  (function() {\n    try {\n      return returnValue.result = commandFn.apply(this, data);\n    } catch (e) {\n      return returnValue.error = e.message;\n    }\n  }).call(this);\n  return postMessage([ identifier, returnValue ]);\n});\nonmessage = onMessage;\n\n/*****************\n ** WEBPACK FOOTER\n ** ./worker.sibilant\n ** module id = 0\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./worker.sibilant?");

/***/ },

/***/ 764:
/***/ function(module, exports, __webpack_require__) {

	eval("//# sourceMappingURL=../maps/browser.map\n;\nthis.sibilant = (function() {\n  /* src/browser.sibilant:4:5 */\n\n  var sibilant = {  },\n      exports = sibilant;\n  var error = (function error$(str) {\n    /* error src/browser.sibilant:6:6 */\n  \n    throw str\n  });\n  var inspect = (function inspect$(item) {\n    /* inspect src/browser.sibilant:7:6 */\n  \n    return (function() {\n      if (item.toSource) {\n        return item.toSource();\n      } else {\n        return item.toString();\n      }\n    }).call(this);\n  });\n  var bulkMap = (function bulkMap$(arr, fn) {\n    /* bulk-map include/functional.sibilant:1:0 */\n  \n    var index = 0,\n        groupSize = fn.length,\n        retArr = [];\n    (function() {\n      var $_symbol1_$ = undefined;\n      while (index < arr.length) {\n        $_symbol1_$ = (function() {\n          retArr.push(fn.apply(this, arr.slice(index, (index + groupSize))));\n          return index += groupSize;\n        }).call(this);\n      };\n      return $_symbol1_$;\n    }).call(this);\n    return retArr;\n  });\n  var inject = (function inject$(start, items, fn) {\n    /* inject include/functional.sibilant:13:0 */\n  \n    var value = start;\n    (function() {\n      if (((items) && typeof (items) === \"object\" && (items).constructor.name === \"Array\")) {\n        return items.forEach((function(item, index) {\n          /* include/functional.sibilant:16:4 */\n        \n          return value = fn(value, item, index);\n        }));\n      }\n    }).call(this);\n    return value;\n  });\n  var map = (function map$(items, fn) {\n    /* map include/functional.sibilant:20:0 */\n  \n    return inject([], items, (function(collector, item, index) {\n      /* include/functional.sibilant:22:10 */\n    \n      collector.push(fn(item, index));\n      return collector;\n    }));\n  });\n  var select = (function select$(items, fn) {\n    /* select include/functional.sibilant:26:0 */\n  \n    return inject([], items, (function(collector, item, index) {\n      /* include/functional.sibilant:28:10 */\n    \n      (function() {\n        if (fn(item, index)) {\n          return collector.push(item);\n        }\n      }).call(this);\n      return collector;\n    }));\n  });\n  var detect = (function detect$(items, fn) {\n    /* detect include/functional.sibilant:33:0 */\n  \n    var returnItem = undefined,\n        index = 0,\n        items = (items || []);\n    (function() {\n      var $_symbol2_$ = undefined;\n      while (!((items.length === index || returnItem))) {\n        $_symbol2_$ = (function() {\n          (function() {\n            if (fn(items[index], index)) {\n              return returnItem = items[index];\n            }\n          }).call(this);\n          return ((index)++);\n        }).call(this);\n      };\n      return $_symbol2_$;\n    }).call(this);\n    return returnItem;\n  });\n  var all__QUERY = (function all__QUERY$(items, fn) {\n    /* all? include/functional.sibilant:45:0 */\n  \n    return typeof detect(items, (function(item, index) {\n      /* include/functional.sibilant:46:31 */\n    \n      return !(fn(item, index));\n    })) === \"undefined\";\n  });\n  var none__QUERY = (function none__QUERY$(items, fn) {\n    /* none? include/functional.sibilant:48:0 */\n  \n    return typeof detect(items, fn) === \"undefined\";\n  });\n  var any__QUERY = (function any__QUERY$(items, fn) {\n    /* any? include/functional.sibilant:51:0 */\n  \n    return typeof detect(items, fn) !== \"undefined\";\n  });\n  var reject = (function reject$(items, fn) {\n    /* reject include/functional.sibilant:54:0 */\n  \n    var args = [ items, fn ];\n    return select(items, (function() {\n      /* include/functional.sibilant:56:16 */\n    \n      return !(fn.apply(this, arguments));\n    }));\n  });\n  var compact = (function compact$(arr) {\n    /* compact include/functional.sibilant:58:0 */\n  \n    return select(arr, (function(item) {\n      /* include/functional.sibilant:59:17 */\n    \n      return (null !== item && false !== item && typeof item !== \"undefined\");\n    }));\n  });\n  var interleave = (function interleave$(glue, arr) {\n    /* interleave include/functional.sibilant:65:0 */\n  \n    (function() {\n      if ((typeof arr === \"string\" && ((glue) && typeof (glue) === \"object\" && (glue).constructor.name === \"Array\"))) {\n        var temp = glue;\n        glue = arr;\n        return arr = temp;\n      }\n    }).call(this);\n    return (function() {\n      if (((glue) && typeof (glue) === \"object\" && (glue).constructor.name === \"Array\")) {\n        return inject([], arr, (function(collector, item, index) {\n          /* include/functional.sibilant:71:13 */\n        \n          return collector.concat([ item, glue[index] ]);\n        }));\n      } else {\n        return inject([ arr[0] ], arr.slice(1), (function(collector, item, index) {\n          /* include/functional.sibilant:75:13 */\n        \n          return collector.concat([ glue, item ]);\n        }));\n      }\n    }).call(this);\n  });\n  var flatten = (function flatten$(items) {\n    /* flatten include/functional.sibilant:78:0 */\n  \n    var items = Array.prototype.slice.call(arguments, 0);\n  \n    return inject([], items, (function(collector, item) {\n      /* include/functional.sibilant:80:10 */\n    \n      return collector.concat((function() {\n        if (((item) && typeof (item) === \"object\" && (item).constructor.name === \"Array\")) {\n          return flatten.apply(this, item);\n        } else {\n          return item;\n        }\n      }).call(this));\n    }));\n  });\n  var recurseMap = (function recurseMap$(item, fn) {\n    /* recurse-map include/functional.sibilant:87:0 */\n  \n    return (function() {\n      if (((item) && typeof (item) === \"object\" && (item).constructor.name === \"Array\")) {\n        return map(item, (function(subitem) {\n          /* include/functional.sibilant:88:32 */\n        \n          return recurseMap(subitem, fn);\n        }));\n      } else {\n        return fn(item);\n      }\n    }).call(this);\n  });\n  var pluck = (function pluck$(items, attribute) {\n    /* pluck include/functional.sibilant:91:0 */\n  \n    return map(items, (function(item) {\n      /* include/functional.sibilant:92:16 */\n    \n      return item[attribute];\n    }));\n  });\n  var mergeInto = (function mergeInto$(into, from) {\n    /* merge-into include/functional.sibilant:94:0 */\n  \n    Object.keys(from).forEach((function(key) {\n      /* include/functional.sibilant:95:5 */\n    \n      return into[key] = from[key];\n    }));\n    return into;\n  });\n  var clone = (function clone$(object) {\n    /* clone include/functional.sibilant:98:0 */\n  \n    return inject({  }, Object.keys(object), (function(collector, key) {\n      /* include/functional.sibilant:100:13 */\n    \n      collector[key] = object[key];\n      return collector;\n    }));\n  });\n  var mapValues = (function mapValues$(object, fn) {\n    /* map-values include/functional.sibilant:104:0 */\n  \n    return inject({  }, Object.keys(object), (function(collector, key, index) {\n      /* include/functional.sibilant:106:13 */\n    \n      collector[key] = fn(object[key], key);\n      return collector;\n    }));\n  });\n  var mergeWith = (function mergeWith$(into, from) {\n    /* merge-with include/functional.sibilant:110:0 */\n  \n    return mergeInto(clone(into), from);\n  });\n  var log__BANG = (function log__BANG$(args) {\n    /* log! src/colors.sibilant:1:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return inspect__BANG.apply(this, args).forEach((function() {\n      /* src/colors.sibilant:2:35 */\n    \n      return console.log(arguments[0]);\n    }));\n  });\n  var inspect__BANG = (function inspect__BANG$(args) {\n    /* inspect! src/colors.sibilant:4:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return args.map((function() {\n      /* src/colors.sibilant:5:15 */\n    \n      return util.inspect(arguments[0], {\n        colors: false,\n        depth: 3\n      });\n    }));\n  });\n  var color = (function color$(code, items, depth) {\n    /* color src/colors.sibilant:7:0 */\n  \n    return (code + items.join(\"\") + \"\\033[0m\");\n  });\n  var black = (function black$(args) {\n    /* black src/colors.sibilant:10:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return color(\"\\033[0;30m\", args);\n  });\n  var red = (function red$(args) {\n    /* red src/colors.sibilant:11:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return color(\"\\033[0;31m\", args);\n  });\n  var green = (function green$(args) {\n    /* green src/colors.sibilant:12:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return color(\"\\033[0;32m\", args);\n  });\n  var brown = (function brown$(args) {\n    /* brown src/colors.sibilant:13:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return color(\"\\033[0;33m\", args);\n  });\n  var blue = (function blue$(args) {\n    /* blue src/colors.sibilant:14:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return color(\"\\033[0;34m\", args);\n  });\n  var purple = (function purple$(args) {\n    /* purple src/colors.sibilant:15:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return color(\"\\033[0;35m\", args);\n  });\n  var cyan = (function cyan$(args) {\n    /* cyan src/colors.sibilant:16:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return color(\"\\033[0;36m\", args);\n  });\n  var gray = (function gray$(args) {\n    /* gray src/colors.sibilant:17:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return color(\"\\033[0;37m\", args);\n  });\n  var boldGray = (function boldGray$(args) {\n    /* bold-gray src/colors.sibilant:18:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return color(\"\\033[1;30m\", args);\n  });\n  var boldRed = (function boldRed$(args) {\n    /* bold-red src/colors.sibilant:19:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return color(\"\\033[1;31m\", args);\n  });\n  var boldGreen = (function boldGreen$(args) {\n    /* bold-green src/colors.sibilant:20:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return color(\"\\033[1;32m\", args);\n  });\n  var yellow = (function yellow$(args) {\n    /* yellow src/colors.sibilant:21:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return color(\"\\033[1;33m\", args);\n  });\n  var boldBlue = (function boldBlue$(args) {\n    /* bold-blue src/colors.sibilant:22:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return color(\"\\033[1;34m\", args);\n  });\n  var boldPurple = (function boldPurple$(args) {\n    /* bold-purple src/colors.sibilant:23:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return color(\"\\033[1;35m\", args);\n  });\n  var boldCyan = (function boldCyan$(args) {\n    /* bold-cyan src/colors.sibilant:24:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return color(\"\\033[1;36m\", args);\n  });\n  var white = (function white$(args) {\n    /* white src/colors.sibilant:25:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return color(\"\\033[1;37m\", args);\n  });\n  sibilant.prettyPrint = (function sibilant$prettyPrint$(node, color, entry) {\n    /* sibilant.pretty-print src/pretty-printer.sibilant:3:0 */\n  \n    entry = (typeof entry !== \"undefined\") ? entry : true;\n    color = (typeof color !== \"undefined\") ? color : true;\n    return realNewlines((function() {\n      if (node__QUERY(node)) {\n        var prettyPrinter = (sibilant.prettyPrint[node.type] || sibilant.prettyPrint.default);\n        return prettyPrinter(node, color, entry);\n      } else if (((node) && typeof (node) === \"object\" && (node).constructor.name === \"Array\")) {\n        return ((function() {\n          if (color) {\n            return black(\"[\");\n          } else {\n            return \"\";\n          }\n        }).call(this) + map(node, (function() {\n          /* src/pretty-printer.sibilant:14:28 */\n        \n          return prettify(arguments[0], color, false);\n        })).join((function() {\n          if (color) {\n            return black(\",\");\n          } else {\n            return \"\";\n          }\n        }).call(this)) + (function() {\n          if (color) {\n            return black(\"]\");\n          } else {\n            return \"\";\n          }\n        }).call(this));\n      } else if (color) {\n        return red(inspect(node));\n      } else {\n        return realNewlines(inspect(node));\n      }\n    }).call(this));\n  });\n  var prettify = sibilant.prettyPrint;\n  sibilant.prettyPrint.default = (function sibilant$prettyPrint$default$(node, color, entry) {\n    /* sibilant.pretty-print.default src/pretty-printer.sibilant:23:0 */\n  \n    var mapPretty = (function mapPretty$(attr) {\n      /* map-pretty src/pretty-printer.sibilant:24:5 */\n    \n      var arr = node[attr];\n      return (function() {\n        if ((arr && arr.length)) {\n          return map(arr, (function() {\n            /* src/pretty-printer.sibilant:27:27 */\n          \n            return prettify(arguments[0], color, false);\n          })).join(\"\");\n        } else {\n          return \"\";\n        }\n      }).call(this);\n    });\n    return realNewlines(sibilant.prettyPrint.colorize(node, color, ((function() {\n      if (entry) {\n        return \"\";\n      } else {\n        return mapPretty(\"precedingIgnored\");\n      }\n    }).call(this) + mapPretty(\"modifiers\") + node.token + mapPretty(\"contents\") + mapPretty(\"closingIgnored\") + ((node.closed && acceptablePairs[node.token]) || \"\"))));\n  });\n  sibilant.prettyPrint.root = (function sibilant$prettyPrint$root$(node, color, entry) {\n    /* sibilant.pretty-print.root src/pretty-printer.sibilant:39:0 */\n  \n    return map(node.contents, (function() {\n      /* src/pretty-printer.sibilant:41:16 */\n    \n      return prettify(arguments[0], color, false);\n    })).join(\"\\n\");\n  });\n  sibilant.prettyPrint.output = (function sibilant$prettyPrint$output$(node, color) {\n    /* sibilant.pretty-print.output src/pretty-printer.sibilant:44:0 */\n  \n    return ((function() {\n      if (color) {\n        return black(\"{\");\n      } else {\n        return \"\";\n      }\n    }).call(this) + (function() {\n      if (((node.contents) && typeof (node.contents) === \"object\" && (node.contents).constructor.name === \"Array\")) {\n        return map(node.contents, (function() {\n          /* src/pretty-printer.sibilant:48:28 */\n        \n          return sibilant.prettyPrint.colorize(node, color, prettify(arguments[0], color, false));\n        })).join((function() {\n          if (color) {\n            return black(\",\");\n          } else {\n            return \"\";\n          }\n        }).call(this));\n      } else {\n        return sibilant.prettyPrint.colorize(node, color, node.contents);\n      }\n    }).call(this) + (function() {\n      if (color) {\n        return black(\"}\");\n      } else {\n        return \"\";\n      }\n    }).call(this));\n  });\n  var realNewlines = (function realNewlines$(node) {\n    /* real-newlines src/pretty-printer.sibilant:54:0 */\n  \n    return node.split(\"\\\\n\").join(\"\\n\");\n  });\n  sibilant.prettyPrint.colorize = (function sibilant$prettyPrint$colorize$(node, color, string) {\n    /* sibilant.pretty-print.colorize src/pretty-printer.sibilant:59:0 */\n  \n    return (function() {\n      if (!(color)) {\n        return string;\n      } else if (node.hint === \"macro\") {\n        return yellow(string);\n      } else if (node__QUERY(node, \"output\")) {\n        return purple(string);\n      } else {\n        return green(string);\n      }\n    }).call(this);\n  });\n  var outputFormatter = (function outputFormatter$(node) {\n    /* output-formatter src/output-formatter.sibilant:1:0 */\n  \n    return (function() {\n      if (((node) && typeof (node) === \"object\" && (node).constructor.name === \"Array\")) {\n        return map(node, outputFormatter).join(\"\");\n      } else if (node__QUERY(node, \"output\")) {\n        return outputFormatter(node.contents);\n      } else if ((typeof node === \"string\" || typeof node === \"number\")) {\n        return node;\n      } else if (!((typeof node !== \"undefined\" && node !== null))) {\n        return \"\";\n      } else if (node__QUERY(node)) {\n        console.log(\"WE SHOULD NOT BE HERE\");\n        console.log(\"node\");\n        console.log(prettify(node));\n        return outputFormatter(transpile(node));\n      }\n    }).call(this);\n  });\n  sibilant.outputFormatter = outputFormatter;\n  var bulkMap = (function bulkMap$(arr, fn) {\n    /* bulk-map include/functional.sibilant:1:0 */\n  \n    var index = 0,\n        groupSize = fn.length,\n        retArr = [];\n    (function() {\n      var $_symbol3_$ = undefined;\n      while (index < arr.length) {\n        $_symbol3_$ = (function() {\n          retArr.push(fn.apply(this, arr.slice(index, (index + groupSize))));\n          return index += groupSize;\n        }).call(this);\n      };\n      return $_symbol3_$;\n    }).call(this);\n    return retArr;\n  });\n  var inject = (function inject$(start, items, fn) {\n    /* inject include/functional.sibilant:13:0 */\n  \n    var value = start;\n    (function() {\n      if (((items) && typeof (items) === \"object\" && (items).constructor.name === \"Array\")) {\n        return items.forEach((function(item, index) {\n          /* include/functional.sibilant:16:4 */\n        \n          return value = fn(value, item, index);\n        }));\n      }\n    }).call(this);\n    return value;\n  });\n  var map = (function map$(items, fn) {\n    /* map include/functional.sibilant:20:0 */\n  \n    return inject([], items, (function(collector, item, index) {\n      /* include/functional.sibilant:22:10 */\n    \n      collector.push(fn(item, index));\n      return collector;\n    }));\n  });\n  var select = (function select$(items, fn) {\n    /* select include/functional.sibilant:26:0 */\n  \n    return inject([], items, (function(collector, item, index) {\n      /* include/functional.sibilant:28:10 */\n    \n      (function() {\n        if (fn(item, index)) {\n          return collector.push(item);\n        }\n      }).call(this);\n      return collector;\n    }));\n  });\n  var detect = (function detect$(items, fn) {\n    /* detect include/functional.sibilant:33:0 */\n  \n    var returnItem = undefined,\n        index = 0,\n        items = (items || []);\n    (function() {\n      var $_symbol4_$ = undefined;\n      while (!((items.length === index || returnItem))) {\n        $_symbol4_$ = (function() {\n          (function() {\n            if (fn(items[index], index)) {\n              return returnItem = items[index];\n            }\n          }).call(this);\n          return ((index)++);\n        }).call(this);\n      };\n      return $_symbol4_$;\n    }).call(this);\n    return returnItem;\n  });\n  var all__QUERY = (function all__QUERY$(items, fn) {\n    /* all? include/functional.sibilant:45:0 */\n  \n    return typeof detect(items, (function(item, index) {\n      /* include/functional.sibilant:46:31 */\n    \n      return !(fn(item, index));\n    })) === \"undefined\";\n  });\n  var none__QUERY = (function none__QUERY$(items, fn) {\n    /* none? include/functional.sibilant:48:0 */\n  \n    return typeof detect(items, fn) === \"undefined\";\n  });\n  var any__QUERY = (function any__QUERY$(items, fn) {\n    /* any? include/functional.sibilant:51:0 */\n  \n    return typeof detect(items, fn) !== \"undefined\";\n  });\n  var reject = (function reject$(items, fn) {\n    /* reject include/functional.sibilant:54:0 */\n  \n    var args = [ items, fn ];\n    return select(items, (function() {\n      /* include/functional.sibilant:56:16 */\n    \n      return !(fn.apply(this, arguments));\n    }));\n  });\n  var compact = (function compact$(arr) {\n    /* compact include/functional.sibilant:58:0 */\n  \n    return select(arr, (function(item) {\n      /* include/functional.sibilant:59:17 */\n    \n      return (null !== item && false !== item && typeof item !== \"undefined\");\n    }));\n  });\n  var interleave = (function interleave$(glue, arr) {\n    /* interleave include/functional.sibilant:65:0 */\n  \n    (function() {\n      if ((typeof arr === \"string\" && ((glue) && typeof (glue) === \"object\" && (glue).constructor.name === \"Array\"))) {\n        var temp = glue;\n        glue = arr;\n        return arr = temp;\n      }\n    }).call(this);\n    return (function() {\n      if (((glue) && typeof (glue) === \"object\" && (glue).constructor.name === \"Array\")) {\n        return inject([], arr, (function(collector, item, index) {\n          /* include/functional.sibilant:71:13 */\n        \n          return collector.concat([ item, glue[index] ]);\n        }));\n      } else {\n        return inject([ arr[0] ], arr.slice(1), (function(collector, item, index) {\n          /* include/functional.sibilant:75:13 */\n        \n          return collector.concat([ glue, item ]);\n        }));\n      }\n    }).call(this);\n  });\n  var flatten = (function flatten$(items) {\n    /* flatten include/functional.sibilant:78:0 */\n  \n    var items = Array.prototype.slice.call(arguments, 0);\n  \n    return inject([], items, (function(collector, item) {\n      /* include/functional.sibilant:80:10 */\n    \n      return collector.concat((function() {\n        if (((item) && typeof (item) === \"object\" && (item).constructor.name === \"Array\")) {\n          return flatten.apply(this, item);\n        } else {\n          return item;\n        }\n      }).call(this));\n    }));\n  });\n  var recurseMap = (function recurseMap$(item, fn) {\n    /* recurse-map include/functional.sibilant:87:0 */\n  \n    return (function() {\n      if (((item) && typeof (item) === \"object\" && (item).constructor.name === \"Array\")) {\n        return map(item, (function(subitem) {\n          /* include/functional.sibilant:88:32 */\n        \n          return recurseMap(subitem, fn);\n        }));\n      } else {\n        return fn(item);\n      }\n    }).call(this);\n  });\n  var pluck = (function pluck$(items, attribute) {\n    /* pluck include/functional.sibilant:91:0 */\n  \n    return map(items, (function(item) {\n      /* include/functional.sibilant:92:16 */\n    \n      return item[attribute];\n    }));\n  });\n  var mergeInto = (function mergeInto$(into, from) {\n    /* merge-into include/functional.sibilant:94:0 */\n  \n    Object.keys(from).forEach((function(key) {\n      /* include/functional.sibilant:95:5 */\n    \n      return into[key] = from[key];\n    }));\n    return into;\n  });\n  var clone = (function clone$(object) {\n    /* clone include/functional.sibilant:98:0 */\n  \n    return inject({  }, Object.keys(object), (function(collector, key) {\n      /* include/functional.sibilant:100:13 */\n    \n      collector[key] = object[key];\n      return collector;\n    }));\n  });\n  var mapValues = (function mapValues$(object, fn) {\n    /* map-values include/functional.sibilant:104:0 */\n  \n    return inject({  }, Object.keys(object), (function(collector, key, index) {\n      /* include/functional.sibilant:106:13 */\n    \n      collector[key] = fn(object[key], key);\n      return collector;\n    }));\n  });\n  var mergeWith = (function mergeWith$(into, from) {\n    /* merge-with include/functional.sibilant:110:0 */\n  \n    return mergeInto(clone(into), from);\n  });\n  var parser = {  };\n  sibilant.parser = parser;\n  parser.tokens = {\n    \"regex\": \"(\\\\/(\\\\\\\\\\\\\\/|[^\\\\/\\\\n])+\\\\/[glim]*)\",\n    \"comment\": \"(;.*)\",\n    \"string\": \"(\\\"(([^\\\"]|(\\\\\\\\\\\"))*[^\\\\\\\\])?\\\")\",\n    \"number\": \"(-?[0-9][0-9.,]*)\",\n    \"literal\": \"(-?[*.$a-zA-Z_][/*.a-zA-Z0-9-_]*(\\\\?|!)?)\",\n    \"special\": \"([&'])\",\n    \"at\": \"@\",\n    \"tick\": \"[`']\",\n    \"hat\": \"(\\\\^)\",\n    \"dots\": \"(\\\\.+)\",\n    \"argPlaceholder\": \"(#[0-9]+)\",\n    \"otherChar\": \"([\\\\|#><=!\\\\+\\\\/\\\\*-]+)\",\n    \"openExpression\": \"(\\\\(|\\\\{|\\\\[)\",\n    \"closeExpression\": \"(\\\\)|\\\\}|\\\\])\",\n    \"newline\": \"\\\\n\",\n    \"whitespace\": \"\\\\s+\",\n    \"ignored\": \".\"\n  };\n  parser.tokenPrecedence = [ \"regex\", \"comment\", \"string\", \"number\", \"dots\", \"tick\", \"hat\", \"at\", \"special\", \"literal\", \"argPlaceholder\", \"otherChar\", \"openExpression\", \"closeExpression\", \"newline\", \"whitespace\", \"ignored\" ];\n  parser.orderedRegexes = parser.tokenPrecedence.map((function(x) {\n    /* src/parser.sibilant:41:23 */\n  \n    return mergeInto((new RegExp((\"^\" + parser.tokens[x]), undefined)), { name: x });\n  }));\n  var orderedRegexes = parser.orderedRegexes;\n  parser.parse = (function parser$parse$(string, context) {\n    /* parser.parse src/parser.sibilant:46:0 */\n  \n    context = (typeof context !== \"undefined\") ? context : {\n      position: 0,\n      stack: [],\n      line: 1,\n      lastNewline: 0,\n      col: 0\n    };\n    var match = true,\n        regexName = null,\n        remainingInput = string;\n    (function() {\n      var $_symbol5_$ = undefined;\n      while (match) {\n        $_symbol5_$ = (function() {\n          detect(orderedRegexes, (function(r) {\n            /* src/parser.sibilant:57:20 */\n          \n            regexName = r.name;\n            return match = r.exec(remainingInput);\n          }));\n          return (function() {\n            if ((typeof match !== \"undefined\" && match !== null)) {\n              var matchString = match[0],\n                  length = matchString.length;\n              context.stack.push({\n                dir: sibilant.dir,\n                file: sibilant.file,\n                token: matchString,\n                type: regexName,\n                start: context.position,\n                line: context.line,\n                col: context.col,\n                length: length,\n                contents: []\n              });\n              (function() {\n                if (\"newline\" === regexName) {\n                  ((context.line)++);\n                  context.col = 0;\n                  return context.lastNewline = context.position;\n                } else if ((\"string\" === regexName && matchString.indexOf(\"\\n\") !== -1)) {\n                  var stringNewlineCount = (matchString.split(\"\\n\").length - 1);\n                  context.line += stringNewlineCount;\n                  return context.col = (length - matchString.lastIndexOf(\"\\n\"));\n                } else {\n                  return context.col += length;\n                }\n              }).call(this);\n              context.position += length;\n              return remainingInput = (function() {\n                if (remainingInput.length) {\n                  return remainingInput.slice(length);\n                } else {\n                  return \"\";\n                }\n              }).call(this);\n            }\n          }).call(this);\n        }).call(this);\n      };\n      return $_symbol5_$;\n    }).call(this);\n    return context.stack;\n  });\n  var parse = parser.parse;\n  var restructurers = {  },\n      acceptablePairs = {\n    \"(\": \")\",\n    \"[\": \"]\",\n    \"{\": \"}\"\n  },\n      bracketTypes = {\n    \"(\": \"expression\",\n    \"[\": \"bracket\",\n    \"{\": \"brace\"\n  };\n  var restructure = (function restructure$(input) {\n    /* restructure src/restructurer.sibilant:7:0 */\n  \n    var output = {\n      type: \"root\",\n      contents: [],\n      file: sibilant.file,\n      col: 0,\n      line: 1\n    },\n        context = {\n      parseStack: [ output ],\n      output: output,\n      input: input,\n      ignoredTokens: [],\n      specials: 0\n    };\n    inject(context, input, (function(context, token, index) {\n      /* src/restructurer.sibilant:20:13 */\n    \n      var restructurer = (restructurers[token.type] || restructurers.default);\n      return restructurer(token, context, index);\n    }));\n    (function() {\n      if (!(1 === context.parseStack.length)) {\n        var unclosedNode = context.parseStack[0];\n        throw (new Error((\"unclosed node at \" + unclosedNode.file + \":\" + unclosedNode.line + \":\" + unclosedNode.col + \"\\n  \" + prettify(unclosedNode, false).slice(0, 100))))\n      }\n    }).call(this);\n    return output;\n  });\n  sibilant.restructure = restructure;\n  restructurers.openExpression = (function restructurers$openExpression$(token, context) {\n    /* restructurers.open-expression src/restructurer.sibilant:35:0 */\n  \n    var first = context.parseStack[0];\n    token.contents = [];\n    token.type = bracketTypes[token.token];\n    acceptIgnoredTokens(token, context);\n    acceptSpecials(token, context);\n    first.contents.push(token);\n    context.parseStack.unshift(token);\n    return context;\n  });\n  restructurers.closeExpression = (function restructurers$closeExpression$(node, context, index) {\n    /* restructurers.close-expression src/restructurer.sibilant:47:0 */\n  \n    var first = context.parseStack[0];\n    (function() {\n      if (node__QUERY(first, \"root\")) {\n        throw (new Error((\"unexpected \" + node.token + \" on \" + node.file + \":\" + node.line + \":\" + node.col)))\n      }\n    }).call(this);\n    (function() {\n      if (acceptablePairs[first.token] !== node.token) {\n        throw (new Error((\"trying to close \" + yellow(sibilant.prettyPrint(first)) + \"\\n   on \" + first.file + \":\" + first.line + \":\" + first.col + \"\\n   with \" + sibilant.prettyPrint(node) + \"\\n   on \" + node.file + \":\" + node.line + \":\" + node.col + \"\\n\")))\n      }\n    }).call(this);\n    first.end = node.end;\n    first.closed = true;\n    first.closingIgnored = context.ignoredTokens;\n    context.ignoredTokens = [];\n    context.parseStack.shift();\n    closeSpecials(first, context);\n    (function() {\n      if (context.parseStack.length === 0) {\n        throw (new Error((\"unbalanced parens:\\n\" + inspect(parseStack))))\n      }\n    }).call(this);\n    return context;\n  });\n  var openSpecial = (function openSpecial$(node, context) {\n    /* open-special src/restructurer.sibilant:72:0 */\n  \n    ((context.specials)++);\n    acceptIgnoredTokens(node, context);\n    var first = context.parseStack[0];\n    node.contents = [];\n    first.contents.push(node);\n    context.parseStack.unshift(node);\n    return context;\n  });\n  var acceptSpecials = (function acceptSpecials$(node, context) {\n    /* accept-specials src/restructurer.sibilant:85:0 */\n  \n    node.specials = context.specials;\n    context.specials = 0;\n    return context;\n  });\n  var acceptIgnoredTokens = (function acceptIgnoredTokens$(node, context) {\n    /* accept-ignored-tokens src/restructurer.sibilant:90:0 */\n  \n    node.precedingIgnored = context.ignoredTokens;\n    context.ignoredTokens = [];\n    return context;\n  });\n  var closeSpecials = (function closeSpecials$(node, context) {\n    /* close-specials src/restructurer.sibilant:95:0 */\n  \n    (function() {\n      if (node.specials > 0) {\n        ((node.specials)--);\n        context.parseStack.shift();\n        return closeSpecials(node, context);\n      }\n    }).call(this);\n    return context;\n  });\n  var accumulateIgnoredToken = (function accumulateIgnoredToken$(token, context, index) {\n    /* accumulate-ignored-token src/restructurer.sibilant:103:0 */\n  \n    context.ignoredTokens.push(token);\n    return context;\n  });\n  [ \"hat\", \"dots\", \"tick\", \"at\" ].forEach((function(special) {\n    /* src/restructurer.sibilant:107:0 */\n  \n    return restructurers[special] = openSpecial;\n  }));\n  [ \"whitespace\", \"newline\", \"ignored\" ].forEach((function(ignored) {\n    /* src/restructurer.sibilant:110:0 */\n  \n    return restructurers[ignored] = accumulateIgnoredToken;\n  }));\n  restructurers.default = (function restructurers$default$(token, context, index) {\n    /* restructurers.default src/restructurer.sibilant:113:0 */\n  \n    acceptSpecials(token, context);\n    acceptIgnoredTokens(token, context);\n    context.parseStack[0].contents.push(token);\n    return closeSpecials(token, context);\n  });\n  var coreNamespace = {  },\n      macroNamespaces = { core: coreNamespace };\n  sibilant.state = {  };\n  sibilant.macros = {\n    \"namespaces\": macroNamespaces,\n    \"defaultSearchPath\": [ \"core\" ],\n    \"searchPath\": [ \"core\" ],\n    \"namespace\": coreNamespace\n  };\n  var namespace = sibilant.macros.namespace,\n      macros = sibilant.macros.namespace;\n  sibilant.macros.currentNamespace = (function sibilant$macros$currentNamespace$() {\n    /* sibilant.macros.current-namespace src/macros.sibilant:14:0 */\n  \n    return sibilant.macros.namespaces[sibilant.macros.searchPath[0]];\n  });\n  sibilant.resolveMacro = (function sibilant$resolveMacro$(macroName) {\n    /* sibilant.resolve-macro src/macros.sibilant:17:0 */\n  \n    return (function() {\n      if ((macroName.indexOf(\"/\") !== -1 && 1 < macroName.length && !(macroName.indexOf(\"\\n\") !== -1))) {\n        var pathComponents = macroName.split(\"/\"),\n            macro = (sibilant.macros.namespaces.hasOwnProperty(pathComponents[0]) && sibilant.macros.namespaces[pathComponents[0]][pathComponents.slice(1).join(\"/\")]);\n        return (function() {\n          if (macro) {\n            return macro;\n          } else {\n            return error((\"called namespaced macro \" + macroName + \" but could not find namespace \" + pathComponents[0] + \". you might need to include the file that defines it first.\"));\n          }\n        }).call(this);\n      } else {\n        var namespace = detect(sibilant.macros.searchPath, (function(namespace) {\n          /* src/macros.sibilant:29:33 */\n        \n          return sibilant.macros.namespaces[namespace].hasOwnProperty(macroName);\n        }));\n        return (function() {\n          if (namespace) {\n            return sibilant.macros.namespaces[namespace][macroName];\n          }\n        }).call(this);\n      }\n    }).call(this);\n  });\n  sibilant.withDefaultSearchPath = (function sibilant$withDefaultSearchPath$(fn) {\n    /* sibilant.with-default-search-path src/macros.sibilant:34:0 */\n  \n    var searchPathBefore = sibilant.macros.searchPath;\n    sibilant.macros.searchPath = sibilant.macros.defaultSearchPath;\n    var returnValue = fn();\n    sibilant.macros.searchPath = searchPathBefore;\n    return returnValue;\n  });\n  sibilant.macros.namespaces.core.ternary = (function ternary$(cond, ifTrue, ifFalse) {\n    /* ternary include/macros.sibilant:9:0 */\n  \n    return [ \"(\", transpile(cond), \") ? \", transpile(ifTrue), \" : \", transpile(ifFalse) ];\n  });\n  sibilant.macros.namespaces.core.set = (function set$(arr, kvPairs) {\n    /* set include/macros.sibilant:19:0 */\n  \n    var kvPairs = Array.prototype.slice.call(arguments, 1);\n  \n    return interleave(\"\\n\", bulkMap(kvPairs, (function(k, v) {\n      /* include/macros.sibilant:21:34 */\n    \n      return asStatement([ \"(\", transpile(arr), \")\", \"[\", transpile(k), \"] = \", transpile(v) ]);\n    })));\n  });\n  sibilant.macros.namespaces.core.var = (function var$(pairs) {\n    /* var include/macros.sibilant:25:0 */\n  \n    var pairs = Array.prototype.slice.call(arguments, 0);\n  \n    return asStatement([ \"var \", interleave(\",\\n    \", bulkMap(pairs, (function(name, value) {\n      /* include/macros.sibilant:30:25 */\n    \n      return [ transpile(name), \" = \", transpile(value) ];\n    }))) ]);\n  });\n  sibilant.macros.namespaces.core.get = (function get$(obj, keys) {\n    /* get include/macros.sibilant:35:0 */\n  \n    var keys = Array.prototype.slice.call(arguments, 1);\n  \n    return [ \"(\", transpile(obj), \")\", map(keys, (function(key) {\n      /* include/macros.sibilant:36:42 */\n    \n      return [ \"[\", transpile(key), \"]\" ];\n    })) ];\n  });\n  sibilant.macros.namespaces.core.aliasMacro = (function aliasMacro$(currentMacroName, newMacroName) {\n    /* alias-macro include/macros.sibilant:47:0 */\n  \n    var currentMacroName = outputFormatter(transpile(currentMacroName)),\n        newMacroName = outputFormatter(transpile(newMacroName));\n    sibilant.macros.namespace[newMacroName] = sibilant.macros.namespace[currentMacroName];\n    return null;\n  });\n  sibilant.macros.namespaces.core.send = (function send$(object, method, args) {\n    /* send include/macros.sibilant:62:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 2);\n  \n    return [ transpile(object), \".\", transpile(method), \"(\", interleave(\", \", map(args, transpile)), \")\" ];\n  });\n  sibilant.macros.namespaces.core.apply = (function apply$(fn, arglist) {\n    /* apply include/macros.sibilant:74:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 2119,\n      line: 75,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \".\",\n        type: \"dots\",\n        start: 2120,\n        line: 75,\n        col: 9,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"apply\",\n          type: \"literal\",\n          start: 2121,\n          line: 75,\n          col: 10,\n          length: 5,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        } ],\n        precedingIgnored: []\n      }, fn, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"this\",\n        type: \"literal\",\n        start: 2131,\n        line: 75,\n        col: 20,\n        length: 4,\n        contents: [],\n        specials: 0,\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 2130,\n          line: 75,\n          col: 19,\n          length: 1,\n          contents: []\n        } ]\n      }, arglist ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.cons = (function cons$(first, rest) {\n    /* cons include/macros.sibilant:86:0 */\n  \n    return [ \"[ \", transpile(first), \" ].concat(\", transpile(rest), \")\" ];\n  });\n  sibilant.macros.namespaces.core.append = (function append$(list, additional) {\n    /* append include/macros.sibilant:95:0 */\n  \n    var additional = Array.prototype.slice.call(arguments, 1);\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 2690,\n      line: 96,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \".\",\n        type: \"dots\",\n        start: 2691,\n        line: 96,\n        col: 9,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"concat\",\n          type: \"literal\",\n          start: 2692,\n          line: 96,\n          col: 10,\n          length: 6,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        } ],\n        precedingIgnored: []\n      }, list, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 2705,\n        line: 96,\n        col: 23,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"list\",\n          type: \"literal\",\n          start: 2706,\n          line: 96,\n          col: 24,\n          length: 4,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        } ].concat(additional),\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 2704,\n          line: 96,\n          col: 22,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      } ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.length = (function length$(arr) {\n    /* length include/macros.sibilant:102:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 2871,\n      line: 103,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"get\",\n        type: \"literal\",\n        start: 2872,\n        line: 103,\n        col: 9,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, arr, {\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"'\",\"type\":\"tick\",\"start\":2881,\"line\":103,\"col\":18,\"length\":1,\"contents\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"length\",\"type\":\"literal\",\"start\":2882,\"line\":103,\"col\":19,\"length\":6,\"contents\":[],\"specials\":0,\"precedingIgnored\":[]}],\"precedingIgnored\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\" \",\"type\":\"whitespace\",\"start\":2880,\"line\":103,\"col\":17,\"length\":1,\"contents\":[]}]} ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.scoped = (function scoped$(body) {\n    /* scoped include/macros.sibilant:109:0 */\n  \n    var body = Array.prototype.slice.call(arguments, 0);\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 3126,\n      line: 110,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \".\",\n        type: \"dots\",\n        start: 3127,\n        line: 110,\n        col: 9,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"call\",\n          type: \"literal\",\n          start: 3128,\n          line: 110,\n          col: 10,\n          length: 4,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        } ],\n        precedingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 3133,\n        line: 110,\n        col: 15,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"lambda\",\n          type: \"literal\",\n          start: 3134,\n          line: 110,\n          col: 16,\n          length: 6,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, {\n          node: this,\n          args: []\n        } ].concat(body),\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 3132,\n          line: 110,\n          col: 14,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"this\",\n        type: \"literal\",\n        start: 3172,\n        line: 110,\n        col: 54,\n        length: 4,\n        contents: [],\n        specials: 0,\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 3171,\n          line: 110,\n          col: 53,\n          length: 1,\n          contents: []\n        } ]\n      } ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.first = (function first$(arr) {\n    /* first include/macros.sibilant:130:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 3954,\n      line: 130,\n      col: 20,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"get\",\n        type: \"literal\",\n        start: 3955,\n        line: 130,\n        col: 21,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, arr, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"0\",\n        type: \"number\",\n        start: 3964,\n        line: 130,\n        col: 30,\n        length: 1,\n        contents: [],\n        specials: 0,\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 3963,\n          line: 130,\n          col: 29,\n          length: 1,\n          contents: []\n        } ]\n      } ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.second = (function second$(arr) {\n    /* second include/macros.sibilant:131:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 3989,\n      line: 131,\n      col: 21,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"get\",\n        type: \"literal\",\n        start: 3990,\n        line: 131,\n        col: 22,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, arr, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"1\",\n        type: \"number\",\n        start: 3999,\n        line: 131,\n        col: 31,\n        length: 1,\n        contents: [],\n        specials: 0,\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 3998,\n          line: 131,\n          col: 30,\n          length: 1,\n          contents: []\n        } ]\n      } ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.third = (function third$(arr) {\n    /* third include/macros.sibilant:132:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 4023,\n      line: 132,\n      col: 20,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"get\",\n        type: \"literal\",\n        start: 4024,\n        line: 132,\n        col: 21,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, arr, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"2\",\n        type: \"number\",\n        start: 4033,\n        line: 132,\n        col: 30,\n        length: 1,\n        contents: [],\n        specials: 0,\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 4032,\n          line: 132,\n          col: 29,\n          length: 1,\n          contents: []\n        } ]\n      } ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.rest = (function rest$(arr) {\n    /* rest include/macros.sibilant:138:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 4170,\n      line: 138,\n      col: 19,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \".\",\n        type: \"dots\",\n        start: 4171,\n        line: 138,\n        col: 20,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"slice\",\n          type: \"literal\",\n          start: 4172,\n          line: 138,\n          col: 21,\n          length: 5,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        } ],\n        precedingIgnored: []\n      }, arr, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"1\",\n        type: \"number\",\n        start: 4183,\n        line: 138,\n        col: 32,\n        length: 1,\n        contents: [],\n        specials: 0,\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 4182,\n          line: 138,\n          col: 31,\n          length: 1,\n          contents: []\n        } ]\n      } ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.last = (function last$(arr) {\n    /* last include/macros.sibilant:143:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 4330,\n      line: 143,\n      col: 19,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"first\",\n        type: \"literal\",\n        start: 4331,\n        line: 143,\n        col: 20,\n        length: 5,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 4337,\n        line: 143,\n        col: 26,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \".\",\n          type: \"dots\",\n          start: 4338,\n          line: 143,\n          col: 27,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"slice\",\n            type: \"literal\",\n            start: 4339,\n            line: 143,\n            col: 28,\n            length: 5,\n            contents: [],\n            specials: 0,\n            precedingIgnored: []\n          } ],\n          precedingIgnored: []\n        }, arr, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"-1\",\n          type: \"number\",\n          start: 4350,\n          line: 143,\n          col: 39,\n          length: 2,\n          contents: [],\n          specials: 0,\n          precedingIgnored: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \" \",\n            type: \"whitespace\",\n            start: 4349,\n            line: 143,\n            col: 38,\n            length: 1,\n            contents: []\n          } ]\n        } ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 4336,\n          line: 143,\n          col: 25,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      } ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"=\"] = (function $$(a, b) {\n    /* = include/macros.sibilant:146:0 */\n  \n    return [ transpile(a), \" === \", transpile(b) ];\n  });\n  sibilant.macros.namespaces.core[\"+\"] = (function $$(args) {\n    /* + include/macros.sibilant:153:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return [ \"(\", interleave(\" + \", map(args, transpile)), \")\" ];\n  });\n  sibilant.macros.namespaces.core[\"-\"] = (function $$(args) {\n    /* - include/macros.sibilant:160:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return [ \"(\", interleave(\" - \", map(args, transpile)), \")\" ];\n  });\n  sibilant.macros.namespaces.core[\"_\"] = (function _$(args) {\n    /* * include/macros.sibilant:166:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return [ \"(\", interleave(\" * \", map(args, transpile)), \")\" ];\n  });\n  sibilant.macros.namespaces.core[\"/\"] = (function $$(args) {\n    /* / include/macros.sibilant:173:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return [ \"(\", interleave(\" / \", map(args, transpile)), \")\" ];\n  });\n  sibilant.macros.namespaces.core.or = (function or$(args) {\n    /* or include/macros.sibilant:180:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return [ \"(\", interleave(\" || \", map(args, transpile)), \")\" ];\n  });\n  sibilant.macros.namespaces.core.and = (function and$(args) {\n    /* and include/macros.sibilant:188:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return (1 === args.length) ? transpile(args[0]) : [ \"(\", interleave(\" && \", map(args, transpile)), \")\" ];\n  });\n  sibilant.macros.namespaces.core.mod = (function mod$(args) {\n    /* mod include/macros.sibilant:195:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return [ \"(\", interleave(\" % \", map(args, transpile)), \")\" ];\n  });\n  sibilant.macros.namespaces.core[\">\"] = (function $$(args) {\n    /* > include/macros.sibilant:230:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    var jsComparator = \">\";\n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 7292,\n      line: 232,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"and\",\n        type: \"literal\",\n        start: 7293,\n        line: 232,\n        col: 9,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      } ].concat(map(args.slice(0, -1), (function(item, index) {\n        /* include/macros.sibilant:233:22 */\n      \n        return [ item, \" \", jsComparator, \" \", args[(1 + index)] ];\n      }))),\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"<\"] = (function $$(args) {\n    /* < include/macros.sibilant:237:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    var jsComparator = \"<\";\n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 7504,\n      line: 239,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"and\",\n        type: \"literal\",\n        start: 7505,\n        line: 239,\n        col: 9,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      } ].concat(map(args.slice(0, -1), (function(item, index) {\n        /* include/macros.sibilant:240:22 */\n      \n        return [ item, \" \", jsComparator, \" \", args[(1 + index)] ];\n      }))),\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"<=\"] = (function $$(args) {\n    /* <= include/macros.sibilant:243:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    var jsComparator = \"<=\";\n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 7717,\n      line: 245,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"and\",\n        type: \"literal\",\n        start: 7718,\n        line: 245,\n        col: 9,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      } ].concat(map(args.slice(0, -1), (function(item, index) {\n        /* include/macros.sibilant:246:22 */\n      \n        return [ item, \" \", jsComparator, \" \", args[(1 + index)] ];\n      }))),\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\">=\"] = (function $$(args) {\n    /* >= include/macros.sibilant:249:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    var jsComparator = \">=\";\n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 7930,\n      line: 251,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"and\",\n        type: \"literal\",\n        start: 7931,\n        line: 251,\n        col: 9,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      } ].concat(map(args.slice(0, -1), (function(item, index) {\n        /* include/macros.sibilant:252:22 */\n      \n        return [ item, \" \", jsComparator, \" \", args[(1 + index)] ];\n      }))),\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"!=\"] = (function $$(args) {\n    /* != include/macros.sibilant:254:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    var jsComparator = \"!==\";\n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 8143,\n      line: 256,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"and\",\n        type: \"literal\",\n        start: 8144,\n        line: 256,\n        col: 9,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      } ].concat(map(args.slice(0, -1), (function(item, index) {\n        /* include/macros.sibilant:257:22 */\n      \n        return [ item, \" \", jsComparator, \" \", args[(1 + index)] ];\n      }))),\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"=\"] = (function $$(args) {\n    /* = include/macros.sibilant:260:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    var jsComparator = \"===\";\n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 8356,\n      line: 262,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"and\",\n        type: \"literal\",\n        start: 8357,\n        line: 262,\n        col: 9,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      } ].concat(map(args.slice(0, -1), (function(item, index) {\n        /* include/macros.sibilant:263:22 */\n      \n        return [ item, \" \", jsComparator, \" \", args[(1 + index)] ];\n      }))),\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.incrBy = (function incrBy$(item, increment) {\n    /* incr-by include/macros.sibilant:270:0 */\n  \n    return [ transpile(item), \" += \", transpile(increment) ];\n  });\n  sibilant.macros.namespaces.core.incr = (function incr$(item) {\n    /* incr include/macros.sibilant:279:0 */\n  \n    return [ \"((\", transpile(item), \")++)\" ];\n  });\n  sibilant.macros.namespaces.core.decr = (function decr$(item) {\n    /* decr include/macros.sibilant:286:0 */\n  \n    return [ \"((\", transpile(item), \")--)\" ];\n  });\n  sibilant.macros.namespaces.core.new = (function new$(constructor, args) {\n    /* new include/macros.sibilant:293:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 1);\n  \n    return [ \"(new \", {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 9213,\n      line: 294,\n      col: 17,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"call\",\n        type: \"literal\",\n        start: 9214,\n        line: 294,\n        col: 18,\n        length: 4,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, constructor ].concat(args),\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    }, \")\" ];\n  });\n  sibilant.macros.namespaces.core.regex = (function regex$(pattern, flags) {\n    /* regex include/macros.sibilant:301:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 9458,\n      line: 302,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"new\",\n        type: \"literal\",\n        start: 9459,\n        line: 302,\n        col: 9,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"RegExp\",\n        type: \"literal\",\n        start: 9463,\n        line: 302,\n        col: 13,\n        length: 6,\n        contents: [],\n        specials: 0,\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 9462,\n          line: 302,\n          col: 12,\n          length: 1,\n          contents: []\n        } ]\n      }, pattern, (flags || \"undefined\") ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"zero__QUERY\"] = (function zero__QUERY$(item) {\n    /* zero? include/macros.sibilant:309:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 9624,\n      line: 309,\n      col: 21,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"=\",\n        type: \"otherChar\",\n        start: 9625,\n        line: 309,\n        col: 22,\n        length: 1,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, item, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"0\",\n        type: \"number\",\n        start: 9633,\n        line: 309,\n        col: 30,\n        length: 1,\n        contents: [],\n        specials: 0,\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 9632,\n          line: 309,\n          col: 29,\n          length: 1,\n          contents: []\n        } ]\n      } ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"empty__QUERY\"] = (function empty__QUERY$(arr) {\n    /* empty? include/macros.sibilant:315:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 9788,\n      line: 316,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"=\",\n        type: \"otherChar\",\n        start: 9789,\n        line: 316,\n        col: 9,\n        length: 1,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"0\",\n        type: \"number\",\n        start: 9791,\n        line: 316,\n        col: 11,\n        length: 1,\n        contents: [],\n        specials: 0,\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 9790,\n          line: 316,\n          col: 10,\n          length: 1,\n          contents: []\n        } ]\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 9793,\n        line: 316,\n        col: 13,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"length\",\n          type: \"literal\",\n          start: 9794,\n          line: 316,\n          col: 14,\n          length: 6,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, arr ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 9792,\n          line: 316,\n          col: 12,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      } ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"odd__QUERY\"] = (function odd__QUERY$(number) {\n    /* odd? include/macros.sibilant:322:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 9940,\n      line: 323,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"=\",\n        type: \"otherChar\",\n        start: 9941,\n        line: 323,\n        col: 9,\n        length: 1,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"1\",\n        type: \"number\",\n        start: 9943,\n        line: 323,\n        col: 11,\n        length: 1,\n        contents: [],\n        specials: 0,\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 9942,\n          line: 323,\n          col: 10,\n          length: 1,\n          contents: []\n        } ]\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 9945,\n        line: 323,\n        col: 13,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"mod\",\n          type: \"literal\",\n          start: 9946,\n          line: 323,\n          col: 14,\n          length: 3,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, number, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"2\",\n          type: \"number\",\n          start: 9958,\n          line: 323,\n          col: 26,\n          length: 1,\n          contents: [],\n          specials: 0,\n          precedingIgnored: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \" \",\n            type: \"whitespace\",\n            start: 9957,\n            line: 323,\n            col: 25,\n            length: 1,\n            contents: []\n          } ]\n        } ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 9944,\n          line: 323,\n          col: 12,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      } ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"even__QUERY\"] = (function even__QUERY$(number) {\n    /* even? include/macros.sibilant:329:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 10111,\n      line: 330,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"=\",\n        type: \"otherChar\",\n        start: 10112,\n        line: 330,\n        col: 9,\n        length: 1,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"0\",\n        type: \"number\",\n        start: 10114,\n        line: 330,\n        col: 11,\n        length: 1,\n        contents: [],\n        specials: 0,\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 10113,\n          line: 330,\n          col: 10,\n          length: 1,\n          contents: []\n        } ]\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 10116,\n        line: 330,\n        col: 13,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"mod\",\n          type: \"literal\",\n          start: 10117,\n          line: 330,\n          col: 14,\n          length: 3,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, number, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"2\",\n          type: \"number\",\n          start: 10129,\n          line: 330,\n          col: 26,\n          length: 1,\n          contents: [],\n          specials: 0,\n          precedingIgnored: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \" \",\n            type: \"whitespace\",\n            start: 10128,\n            line: 330,\n            col: 25,\n            length: 1,\n            contents: []\n          } ]\n        } ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 10115,\n          line: 330,\n          col: 12,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      } ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.typeof = (function typeof$(thing) {\n    /* typeof include/macros.sibilant:337:0 */\n  \n    return [ \"typeof \", transpile(thing) ];\n  });\n  sibilant.macros.namespaces.core[\"string__QUERY\"] = (function string__QUERY$(things) {\n    /* string? include/macros.sibilant:343:0 */\n  \n    var things = Array.prototype.slice.call(arguments, 0);\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 10565,\n      line: 344,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"and\",\n        type: \"literal\",\n        start: 10566,\n        line: 344,\n        col: 9,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      } ].concat(map(things, (function(thing) {\n        /* include/macros.sibilant:344:29 */\n      \n        return {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"(\",\n          type: \"expression\",\n          start: 10597,\n          line: 344,\n          col: 40,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"=\",\n            type: \"otherChar\",\n            start: 10598,\n            line: 344,\n            col: 41,\n            length: 1,\n            contents: [],\n            specials: 0,\n            precedingIgnored: []\n          }, {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"(\",\n            type: \"expression\",\n            start: 10600,\n            line: 344,\n            col: 43,\n            length: 1,\n            contents: [ {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \"typeof\",\n              type: \"literal\",\n              start: 10601,\n              line: 344,\n              col: 44,\n              length: 6,\n              contents: [],\n              specials: 0,\n              precedingIgnored: []\n            }, thing ],\n            precedingIgnored: [ {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \" \",\n              type: \"whitespace\",\n              start: 10599,\n              line: 344,\n              col: 42,\n              length: 1,\n              contents: []\n            } ],\n            specials: 0,\n            end: undefined,\n            closed: true,\n            closingIgnored: []\n          }, {\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"'\",\"type\":\"tick\",\"start\":10616,\"line\":344,\"col\":59,\"length\":1,\"contents\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"string\",\"type\":\"literal\",\"start\":10617,\"line\":344,\"col\":60,\"length\":6,\"contents\":[],\"specials\":0,\"precedingIgnored\":[]}],\"precedingIgnored\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\" \",\"type\":\"whitespace\",\"start\":10615,\"line\":344,\"col\":58,\"length\":1,\"contents\":[]}]} ],\n          precedingIgnored: [],\n          specials: 0,\n          end: undefined,\n          closed: true,\n          closingIgnored: []\n        };\n      }))),\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"function__QUERY\"] = (function function__QUERY$(things) {\n    /* function? include/macros.sibilant:350:0 */\n  \n    var things = Array.prototype.slice.call(arguments, 0);\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 10809,\n      line: 351,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"and\",\n        type: \"literal\",\n        start: 10810,\n        line: 351,\n        col: 9,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      } ].concat(map(things, (function(thing) {\n        /* include/macros.sibilant:351:29 */\n      \n        return {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"(\",\n          type: \"expression\",\n          start: 10841,\n          line: 351,\n          col: 40,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"=\",\n            type: \"otherChar\",\n            start: 10842,\n            line: 351,\n            col: 41,\n            length: 1,\n            contents: [],\n            specials: 0,\n            precedingIgnored: []\n          }, {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"(\",\n            type: \"expression\",\n            start: 10844,\n            line: 351,\n            col: 43,\n            length: 1,\n            contents: [ {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \"typeof\",\n              type: \"literal\",\n              start: 10845,\n              line: 351,\n              col: 44,\n              length: 6,\n              contents: [],\n              specials: 0,\n              precedingIgnored: []\n            }, thing ],\n            precedingIgnored: [ {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \" \",\n              type: \"whitespace\",\n              start: 10843,\n              line: 351,\n              col: 42,\n              length: 1,\n              contents: []\n            } ],\n            specials: 0,\n            end: undefined,\n            closed: true,\n            closingIgnored: []\n          }, {\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"'\",\"type\":\"tick\",\"start\":10860,\"line\":351,\"col\":59,\"length\":1,\"contents\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"function\",\"type\":\"literal\",\"start\":10861,\"line\":351,\"col\":60,\"length\":8,\"contents\":[],\"specials\":0,\"precedingIgnored\":[]}],\"precedingIgnored\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\" \",\"type\":\"whitespace\",\"start\":10859,\"line\":351,\"col\":58,\"length\":1,\"contents\":[]}]} ],\n          precedingIgnored: [],\n          specials: 0,\n          end: undefined,\n          closed: true,\n          closingIgnored: []\n        };\n      }))),\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"undefined__QUERY\"] = (function undefined__QUERY$(things) {\n    /* undefined? include/macros.sibilant:360:0 */\n  \n    var things = Array.prototype.slice.call(arguments, 0);\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 11176,\n      line: 361,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"and\",\n        type: \"literal\",\n        start: 11177,\n        line: 361,\n        col: 9,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      } ].concat(map(things, (function(thing) {\n        /* include/macros.sibilant:361:29 */\n      \n        return {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"(\",\n          type: \"expression\",\n          start: 11208,\n          line: 361,\n          col: 40,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"=\",\n            type: \"otherChar\",\n            start: 11209,\n            line: 361,\n            col: 41,\n            length: 1,\n            contents: [],\n            specials: 0,\n            precedingIgnored: []\n          }, {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"(\",\n            type: \"expression\",\n            start: 11211,\n            line: 361,\n            col: 43,\n            length: 1,\n            contents: [ {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \"typeof\",\n              type: \"literal\",\n              start: 11212,\n              line: 361,\n              col: 44,\n              length: 6,\n              contents: [],\n              specials: 0,\n              precedingIgnored: []\n            }, thing ],\n            precedingIgnored: [ {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \" \",\n              type: \"whitespace\",\n              start: 11210,\n              line: 361,\n              col: 42,\n              length: 1,\n              contents: []\n            } ],\n            specials: 0,\n            end: undefined,\n            closed: true,\n            closingIgnored: []\n          }, {\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"'\",\"type\":\"tick\",\"start\":11227,\"line\":361,\"col\":59,\"length\":1,\"contents\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"undefined\",\"type\":\"literal\",\"start\":11228,\"line\":361,\"col\":60,\"length\":9,\"contents\":[],\"specials\":0,\"precedingIgnored\":[]}],\"precedingIgnored\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\" \",\"type\":\"whitespace\",\"start\":11226,\"line\":361,\"col\":58,\"length\":1,\"contents\":[]}]} ],\n          precedingIgnored: [],\n          specials: 0,\n          end: undefined,\n          closed: true,\n          closingIgnored: []\n        };\n      }))),\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"defined__QUERY\"] = (function defined__QUERY$(things) {\n    /* defined? include/macros.sibilant:369:0 */\n  \n    var things = Array.prototype.slice.call(arguments, 0);\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 11503,\n      line: 370,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"and\",\n        type: \"literal\",\n        start: 11504,\n        line: 370,\n        col: 9,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      } ].concat(map(things, (function(thing) {\n        /* include/macros.sibilant:370:29 */\n      \n        return {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"(\",\n          type: \"expression\",\n          start: 11535,\n          line: 370,\n          col: 40,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"!=\",\n            type: \"otherChar\",\n            start: 11536,\n            line: 370,\n            col: 41,\n            length: 2,\n            contents: [],\n            specials: 0,\n            precedingIgnored: []\n          }, {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"(\",\n            type: \"expression\",\n            start: 11539,\n            line: 370,\n            col: 44,\n            length: 1,\n            contents: [ {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \"typeof\",\n              type: \"literal\",\n              start: 11540,\n              line: 370,\n              col: 45,\n              length: 6,\n              contents: [],\n              specials: 0,\n              precedingIgnored: []\n            }, thing ],\n            precedingIgnored: [ {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \" \",\n              type: \"whitespace\",\n              start: 11538,\n              line: 370,\n              col: 43,\n              length: 1,\n              contents: []\n            } ],\n            specials: 0,\n            end: undefined,\n            closed: true,\n            closingIgnored: []\n          }, {\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"'\",\"type\":\"tick\",\"start\":11555,\"line\":370,\"col\":60,\"length\":1,\"contents\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"undefined\",\"type\":\"literal\",\"start\":11556,\"line\":370,\"col\":61,\"length\":9,\"contents\":[],\"specials\":0,\"precedingIgnored\":[]}],\"precedingIgnored\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\" \",\"type\":\"whitespace\",\"start\":11554,\"line\":370,\"col\":59,\"length\":1,\"contents\":[]}]} ],\n          precedingIgnored: [],\n          specials: 0,\n          end: undefined,\n          closed: true,\n          closingIgnored: []\n        };\n      }))),\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"number__QUERY\"] = (function number__QUERY$(things) {\n    /* number? include/macros.sibilant:377:0 */\n  \n    var things = Array.prototype.slice.call(arguments, 0);\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 11764,\n      line: 378,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"and\",\n        type: \"literal\",\n        start: 11765,\n        line: 378,\n        col: 9,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      } ].concat(map(things, (function(thing) {\n        /* include/macros.sibilant:378:29 */\n      \n        return {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"(\",\n          type: \"expression\",\n          start: 11796,\n          line: 378,\n          col: 40,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"=\",\n            type: \"otherChar\",\n            start: 11797,\n            line: 378,\n            col: 41,\n            length: 1,\n            contents: [],\n            specials: 0,\n            precedingIgnored: []\n          }, {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"(\",\n            type: \"expression\",\n            start: 11799,\n            line: 378,\n            col: 43,\n            length: 1,\n            contents: [ {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \"typeof\",\n              type: \"literal\",\n              start: 11800,\n              line: 378,\n              col: 44,\n              length: 6,\n              contents: [],\n              specials: 0,\n              precedingIgnored: []\n            }, thing ],\n            precedingIgnored: [ {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \" \",\n              type: \"whitespace\",\n              start: 11798,\n              line: 378,\n              col: 42,\n              length: 1,\n              contents: []\n            } ],\n            specials: 0,\n            end: undefined,\n            closed: true,\n            closingIgnored: []\n          }, {\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"'\",\"type\":\"tick\",\"start\":11815,\"line\":378,\"col\":59,\"length\":1,\"contents\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"number\",\"type\":\"literal\",\"start\":11816,\"line\":378,\"col\":60,\"length\":6,\"contents\":[],\"specials\":0,\"precedingIgnored\":[]}],\"precedingIgnored\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\" \",\"type\":\"whitespace\",\"start\":11814,\"line\":378,\"col\":58,\"length\":1,\"contents\":[]}]} ],\n          precedingIgnored: [],\n          specials: 0,\n          end: undefined,\n          closed: true,\n          closingIgnored: []\n        };\n      }))),\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.if = (function if$(arg, truebody, falsebody) {\n    /* if include/macros.sibilant:382:0 */\n  \n    return [ \"(function() {\", indent([ \"if (\", transpile(arg), \") {\", indent({\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 11976,\n      line: 385,\n      col: 33,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"do\",\n        type: \"literal\",\n        start: 11977,\n        line: 385,\n        col: 34,\n        length: 2,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      } ].concat(truebody),\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    }), \"} else {\", indent({\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 12063,\n      line: 387,\n      col: 33,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"do\",\n        type: \"literal\",\n        start: 12064,\n        line: 387,\n        col: 34,\n        length: 2,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      } ].concat(falsebody),\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    }), \"}\" ]), \"}).call(this)\" ];\n  });\n  sibilant.macros.namespaces.core.pipe = (function pipe$(calls) {\n    /* pipe include/macros.sibilant:415:0 */\n  \n    var calls = Array.prototype.slice.call(arguments, 0);\n  \n    return inject(undefined, calls, (function(value, item) {\n      /* include/macros.sibilant:417:15 */\n    \n      return (function() {\n        if (typeof value === \"undefined\") {\n          return item;\n        } else {\n          return (function() {\n            /* include/macros.sibilant:419:21 */\n          \n            var cloned = (function() {\n              if (node__QUERY(item, \"literal\", \"dots\")) {\n                return {\n                  dir: \"include\",\n                  file: \"include/macros.sibilant\",\n                  token: \"(\",\n                  type: \"expression\",\n                  start: 13169,\n                  line: 421,\n                  col: 39,\n                  length: 1,\n                  contents: [ item ],\n                  precedingIgnored: [],\n                  specials: 0,\n                  end: undefined,\n                  closed: true,\n                  closingIgnored: []\n                };\n              } else {\n                return clone(item);\n              }\n            }).call(this);\n            var placeholder = detect(cloned.contents, (function(node) {\n              /* include/macros.sibilant:425:47 */\n            \n              return (node__QUERY(node, \"otherChar\") && \"#\" === node.token);\n            })),\n                placeholderIndex = cloned.contents.indexOf(placeholder),\n                placeholderBoundaries = (function() {\n              if (placeholder) {\n                return [ placeholderIndex, (1 + placeholderIndex) ];\n              } else {\n                return [ 1, 1 ];\n              }\n            }).call(this);\n            return mergeInto(cloned, { contents: cloned.contents.slice(0, placeholderBoundaries[0]).concat([ value ], cloned.contents.slice(placeholderBoundaries[1])) });\n          }).call(this);\n        }\n      }).call(this);\n    }));\n  });\n  sibilant.macros.namespaces.core[\"|>\"] = sibilant.macros.namespaces.core.pipe;\n  sibilant.macros.namespaces.core.comment = (function comment$(contents) {\n    /* comment include/macros.sibilant:446:0 */\n  \n    var contents = Array.prototype.slice.call(arguments, 0);\n  \n    return map(contents, (function(content) {\n      /* include/macros.sibilant:447:21 */\n    \n      return [ \"// \", recurseMap(transpile(content), (function(item) {\n        /* include/macros.sibilant:449:36 */\n      \n        return (item) ? outputFormatter(transpile(item)).replace((new RegExp(\"\\n\", \"g\")), \"\\n// \") : null;\n      })) ];\n    }));\n  });\n  sibilant.macros.namespaces.core[\"array__QUERY\"] = (function array__QUERY$(thing) {\n    /* array? include/macros.sibilant:469:0 */\n  \n    var transpiled = transpile(thing);\n    return [ \"((\", transpiled, \") && typeof (\", transpiled, \") === \\\"object\\\" && (\", transpiled, \").constructor.name === \\\"Array\\\")\" ];\n  });\n  sibilant.macros.namespaces.core[\"list__QUERY\"] = sibilant.macros.namespaces.core[\"array__QUERY\"];\n  sibilant.macros.namespaces.core[\"hash__QUERY\"] = (function hash__QUERY$(thing) {\n    /* hash? include/macros.sibilant:481:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 15707,\n      line: 482,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"and\",\n        type: \"literal\",\n        start: 15708,\n        line: 482,\n        col: 9,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 15712,\n        line: 482,\n        col: 13,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"=\",\n          type: \"otherChar\",\n          start: 15713,\n          line: 482,\n          col: 14,\n          length: 1,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, {\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"'\",\"type\":\"tick\",\"start\":15715,\"line\":482,\"col\":16,\"length\":1,\"contents\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"object\",\"type\":\"literal\",\"start\":15716,\"line\":482,\"col\":17,\"length\":6,\"contents\":[],\"specials\":0,\"precedingIgnored\":[]}],\"precedingIgnored\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\" \",\"type\":\"whitespace\",\"start\":15714,\"line\":482,\"col\":15,\"length\":1,\"contents\":[]}]}, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"(\",\n          type: \"expression\",\n          start: 15723,\n          line: 482,\n          col: 24,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"typeof\",\n            type: \"literal\",\n            start: 15724,\n            line: 482,\n            col: 25,\n            length: 6,\n            contents: [],\n            specials: 0,\n            precedingIgnored: []\n          }, thing ],\n          precedingIgnored: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \" \",\n            type: \"whitespace\",\n            start: 15722,\n            line: 482,\n            col: 23,\n            length: 1,\n            contents: []\n          } ],\n          specials: 0,\n          end: undefined,\n          closed: true,\n          closingIgnored: []\n        } ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 15711,\n          line: 482,\n          col: 12,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 15753,\n        line: 483,\n        col: 13,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"!=\",\n          type: \"otherChar\",\n          start: 15754,\n          line: 483,\n          col: 14,\n          length: 2,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, thing, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"null\",\n          type: \"literal\",\n          start: 15764,\n          line: 483,\n          col: 24,\n          length: 4,\n          contents: [],\n          specials: 0,\n          precedingIgnored: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \" \",\n            type: \"whitespace\",\n            start: 15763,\n            line: 483,\n            col: 23,\n            length: 1,\n            contents: []\n          } ]\n        } ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"\\n\",\n          type: \"newline\",\n          start: 15739,\n          line: 482,\n          col: 40,\n          length: 1,\n          contents: []\n        }, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"             \",\n          type: \"whitespace\",\n          start: 15740,\n          line: 483,\n          col: 0,\n          length: 13,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 15783,\n        line: 484,\n        col: 13,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"!=\",\n          type: \"otherChar\",\n          start: 15784,\n          line: 484,\n          col: 14,\n          length: 2,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"(\",\n          type: \"expression\",\n          start: 15787,\n          line: 484,\n          col: 17,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"get\",\n            type: \"literal\",\n            start: 15788,\n            line: 484,\n            col: 18,\n            length: 3,\n            contents: [],\n            specials: 0,\n            precedingIgnored: []\n          }, thing, {\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"'\",\"type\":\"tick\",\"start\":15799,\"line\":484,\"col\":29,\"length\":1,\"contents\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"constructor\",\"type\":\"literal\",\"start\":15800,\"line\":484,\"col\":30,\"length\":11,\"contents\":[],\"specials\":0,\"precedingIgnored\":[]}],\"precedingIgnored\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\" \",\"type\":\"whitespace\",\"start\":15798,\"line\":484,\"col\":28,\"length\":1,\"contents\":[]}]}, {\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"'\",\"type\":\"tick\",\"start\":15812,\"line\":484,\"col\":42,\"length\":1,\"contents\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"name\",\"type\":\"literal\",\"start\":15813,\"line\":484,\"col\":43,\"length\":4,\"contents\":[],\"specials\":0,\"precedingIgnored\":[]}],\"precedingIgnored\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\" \",\"type\":\"whitespace\",\"start\":15811,\"line\":484,\"col\":41,\"length\":1,\"contents\":[]}]} ],\n          precedingIgnored: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \" \",\n            type: \"whitespace\",\n            start: 15786,\n            line: 484,\n            col: 16,\n            length: 1,\n            contents: []\n          } ],\n          specials: 0,\n          end: undefined,\n          closed: true,\n          closingIgnored: []\n        }, {\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"'\",\"type\":\"tick\",\"start\":15819,\"line\":484,\"col\":49,\"length\":1,\"contents\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"Array\",\"type\":\"literal\",\"start\":15820,\"line\":484,\"col\":50,\"length\":5,\"contents\":[],\"specials\":0,\"precedingIgnored\":[]}],\"precedingIgnored\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\" \",\"type\":\"whitespace\",\"start\":15818,\"line\":484,\"col\":48,\"length\":1,\"contents\":[]}]} ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"\\n\",\n          type: \"newline\",\n          start: 15769,\n          line: 483,\n          col: 29,\n          length: 1,\n          contents: []\n        }, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"             \",\n          type: \"whitespace\",\n          start: 15770,\n          line: 484,\n          col: 0,\n          length: 13,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      } ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"object__QUERY\"] = sibilant.macros.namespaces.core[\"hash__QUERY\"];\n  sibilant.macros.namespaces.core[\"_scopedWithoutReturn\"] = (function _scopedWithoutReturn$(body) {\n    /* *scoped-without-return include/macros.sibilant:487:0 */\n  \n    var body = Array.prototype.slice.call(arguments, 0);\n  \n    return [ \"(function() {\", indent.apply(this, body), \"}).call(this)\" ];\n  });\n  sibilant.macros.namespaces.core[\"_scopedWithoutSource\"] = (function _scopedWithoutSource$(body) {\n    /* *scoped-without-source include/macros.sibilant:491:0 */\n  \n    var body = Array.prototype.slice.call(arguments, 0);\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 16007,\n      line: 492,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"*scoped-without-return\",\n        type: \"literal\",\n        start: 16008,\n        line: 492,\n        col: 9,\n        length: 22,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 16031,\n        line: 492,\n        col: 32,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"do\",\n          type: \"literal\",\n          start: 16032,\n          line: 492,\n          col: 33,\n          length: 2,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        } ].concat(body),\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 16030,\n          line: 492,\n          col: 31,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      } ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.when = (function when$(condition, body) {\n    /* when include/macros.sibilant:501:0 */\n  \n    var body = Array.prototype.slice.call(arguments, 1);\n  \n    return sibilant.macros.namespaces.core[\"_scopedWithoutReturn\"](\"if (\", condition, \") {\", indent({\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 16453,\n      line: 504,\n      col: 18,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"do\",\n        type: \"literal\",\n        start: 16454,\n        line: 504,\n        col: 19,\n        length: 2,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      } ].concat(body),\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    }), \"}\");\n  });\n  sibilant.macros.namespaces.core.not = (function not$(exp) {\n    /* not include/macros.sibilant:513:0 */\n  \n    return [ \"!(\", transpile(exp), \")\" ];\n  });\n  sibilant.macros.namespaces.core.unless = (function unless$(condition, body) {\n    /* unless include/macros.sibilant:526:0 */\n  \n    var body = Array.prototype.slice.call(arguments, 1);\n  \n    return [ \"(function() {\", indent([ \"if (\", {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 17186,\n      line: 528,\n      col: 25,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"not\",\n        type: \"literal\",\n        start: 17187,\n        line: 528,\n        col: 26,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, condition ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    }, \") {\", indent({\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 17242,\n      line: 529,\n      col: 33,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"do\",\n        type: \"literal\",\n        start: 17243,\n        line: 529,\n        col: 34,\n        length: 2,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      } ].concat(body),\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    }), \"}\" ]), \"}).call(this)\" ];\n  });\n  sibilant.macros.namespaces.core.assign = (function assign$(args) {\n    /* assign include/macros.sibilant:534:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return interleave(\"\\n\", bulkMap(args, (function(name, value) {\n      /* include/macros.sibilant:536:28 */\n    \n      return asStatement([ transpile(name), \" = \", transpile(value) ]);\n    })));\n  });\n  sibilant.macros.namespaces.core.logPretty = (function logPretty$(label, arg) {\n    /* log-pretty include/macros.sibilant:548:0 */\n  \n    var node = this;\n    (function() {\n      if (typeof arg === \"undefined\") {\n        arg = label;\n        return label = [ \"\\\"\", prettify(label, false), \"\\\"\" ];\n      }\n    }).call(this);\n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 18065,\n      line: 553,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"console.log\",\n        type: \"literal\",\n        start: 18066,\n        line: 553,\n        col: 9,\n        length: 11,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 18078,\n        line: 553,\n        col: 21,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"concat\",\n          type: \"literal\",\n          start: 18079,\n          line: 553,\n          col: 22,\n          length: 6,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, [ \"\\\"\", node.file, \":\", node.line, \"\\\"\" ], {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"\\\" \\\"\",\n          type: \"string\",\n          start: 18123,\n          line: 553,\n          col: 66,\n          length: 3,\n          contents: [],\n          specials: 0,\n          precedingIgnored: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \" \",\n            type: \"whitespace\",\n            start: 18122,\n            line: 553,\n            col: 65,\n            length: 1,\n            contents: []\n          } ]\n        }, label, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"\\\" = \\\"\",\n          type: \"string\",\n          start: 18134,\n          line: 553,\n          col: 77,\n          length: 5,\n          contents: [],\n          specials: 0,\n          precedingIgnored: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \" \",\n            type: \"whitespace\",\n            start: 18133,\n            line: 553,\n            col: 76,\n            length: 1,\n            contents: []\n          } ]\n        }, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"(\",\n          type: \"expression\",\n          start: 18140,\n          line: 553,\n          col: 83,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"prettify\",\n            type: \"literal\",\n            start: 18141,\n            line: 553,\n            col: 84,\n            length: 8,\n            contents: [],\n            specials: 0,\n            precedingIgnored: []\n          }, arg ],\n          precedingIgnored: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \" \",\n            type: \"whitespace\",\n            start: 18139,\n            line: 553,\n            col: 82,\n            length: 1,\n            contents: []\n          } ],\n          specials: 0,\n          end: undefined,\n          closed: true,\n          closingIgnored: []\n        } ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 18077,\n          line: 553,\n          col: 20,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      } ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.prettyLog = sibilant.macros.namespaces.core.logPretty;\n  sibilant.macros.namespaces.core.each = (function each$(item, array, body) {\n    /* each include/macros.sibilant:566:17 */\n  \n    var body = Array.prototype.slice.call(arguments, 2);\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 18935,\n      line: 567,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \".\",\n        type: \"dots\",\n        start: 18936,\n        line: 567,\n        col: 9,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"for-each\",\n          type: \"literal\",\n          start: 18937,\n          line: 567,\n          col: 10,\n          length: 8,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        } ],\n        precedingIgnored: []\n      }, array, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 18972,\n        line: 568,\n        col: 19,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"lambda\",\n          type: \"literal\",\n          start: 18973,\n          line: 568,\n          col: 20,\n          length: 6,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, {\n          node: this,\n          args: (function() {\n            if (node__QUERY(item, \"expression\")) {\n              return item;\n            } else {\n              return [ item ];\n            }\n          }).call(this)\n        } ].concat(body),\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"\\n\",\n          type: \"newline\",\n          start: 18952,\n          line: 567,\n          col: 25,\n          length: 1,\n          contents: []\n        }, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"                   \",\n          type: \"whitespace\",\n          start: 18953,\n          line: 568,\n          col: 0,\n          length: 19,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      } ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.macroExpand = (function macroExpand$(name) {\n    /* macro-expand include/macros.sibilant:581:0 */\n  \n    var macro = macros[outputFormatter(transpile(name))];\n    return (function() {\n      if (macro) {\n        return macro.toString();\n      } else {\n        return \"undefined\";\n      }\n    }).call(this);\n  });\n  sibilant.macros.namespaces.core.throw = (function throw$(error) {\n    /* throw include/macros.sibilant:594:0 */\n  \n    return [ \"throw \", transpile(error) ];\n  });\n  sibilant.macros.namespaces.core.asBoolean = (function asBoolean$(expr) {\n    /* as-boolean include/macros.sibilant:605:0 */\n  \n    return [ \"(!!(\", transpile(expr), \"))\" ];\n  });\n  sibilant.macros.namespaces.core.try = (function try$(tryblock, catchblock) {\n    /* try include/macros.sibilant:611:0 */\n  \n    return [ \"(function() {\", indent([ \"try {\", indent({\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 19905,\n      line: 614,\n      col: 26,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"do\",\n        type: \"literal\",\n        start: 19906,\n        line: 614,\n        col: 27,\n        length: 2,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, tryblock ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    }), \"} catch (e) {\", indent({\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 19980,\n      line: 616,\n      col: 26,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"do\",\n        type: \"literal\",\n        start: 19981,\n        line: 616,\n        col: 27,\n        length: 2,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, catchblock ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    }), \"}\" ]), \"}).call(this)\" ];\n  });\n  sibilant.macros.namespaces.core.state = (function state$(pairs) {\n    /* state include/macros.sibilant:628:0 */\n  \n    var pairs = Array.prototype.slice.call(arguments, 0);\n  \n    return (function() {\n      if (1 === pairs.length) {\n        return sibilant.state[outputFormatter(transpile(pairs[0]))];\n      } else {\n        bulkMap(pairs, (function(k, v) {\n          /* include/macros.sibilant:631:31 */\n        \n          return sibilant.state[outputFormatter(transpile(k))] = eval(outputFormatter(transpile(v)));\n        }));\n        return null;\n      }\n    }).call(this);\n  });\n  sibilant.macros.namespaces.core.symbol = (function symbol$() {\n    /* symbol include/macros.sibilant:637:0 */\n  \n    var symbolCount = (sibilant.state.symbolCount || 0),\n        newSymbolCount = (1 + symbolCount);\n    sibilant.macros.namespaces.core.state(\"symbolCount\", newSymbolCount);\n    return [ (\"$_symbol\" + newSymbolCount + \"_$\") ];\n  });\n  sibilant.macros.namespaces.core.while = (function while$(condition, body) {\n    /* while include/macros.sibilant:652:0 */\n  \n    var body = Array.prototype.slice.call(arguments, 1);\n  \n    var symbol = sibilant.macros.namespaces.core.symbol();\n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 21118,\n      line: 654,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"*scoped-without-source\",\n        type: \"literal\",\n        start: 21119,\n        line: 654,\n        col: 9,\n        length: 22,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 21151,\n        line: 655,\n        col: 9,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"var\",\n          type: \"literal\",\n          start: 21152,\n          line: 655,\n          col: 10,\n          length: 3,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, symbol ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"\\n\",\n          type: \"newline\",\n          start: 21141,\n          line: 654,\n          col: 31,\n          length: 1,\n          contents: []\n        }, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"         \",\n          type: \"whitespace\",\n          start: 21142,\n          line: 655,\n          col: 0,\n          length: 9,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      }, {\n        type: \"output\",\n        contents: [ \"while (\", transpile(condition), \") {\", indent({\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"(\",\n          type: \"expression\",\n          start: 21288,\n          line: 658,\n          col: 35,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"assign\",\n            type: \"literal\",\n            start: 21289,\n            line: 658,\n            col: 36,\n            length: 6,\n            contents: [],\n            specials: 0,\n            precedingIgnored: []\n          }, symbol, {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"(\",\n            type: \"expression\",\n            start: 21304,\n            line: 658,\n            col: 51,\n            length: 1,\n            contents: [ {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \"*scoped-without-source\",\n              type: \"literal\",\n              start: 21305,\n              line: 658,\n              col: 52,\n              length: 22,\n              contents: [],\n              specials: 0,\n              precedingIgnored: []\n            } ].concat(body),\n            precedingIgnored: [ {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \" \",\n              type: \"whitespace\",\n              start: 21303,\n              line: 658,\n              col: 50,\n              length: 1,\n              contents: []\n            } ],\n            specials: 0,\n            end: undefined,\n            closed: true,\n            closingIgnored: []\n          } ],\n          precedingIgnored: [],\n          specials: 0,\n          end: undefined,\n          closed: true,\n          closingIgnored: []\n        }), \"}\" ]\n      }, symbol ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.until = (function until$(condition, body) {\n    /* until include/macros.sibilant:671:0 */\n  \n    var body = Array.prototype.slice.call(arguments, 1);\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 21697,\n      line: 672,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"while\",\n        type: \"literal\",\n        start: 21698,\n        line: 672,\n        col: 9,\n        length: 5,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 21704,\n        line: 672,\n        col: 15,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"not\",\n          type: \"literal\",\n          start: 21705,\n          line: 672,\n          col: 16,\n          length: 3,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, condition ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 21703,\n          line: 672,\n          col: 14,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      } ].concat(body),\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"match__QUERY\"] = (function match__QUERY$(regexp, string) {\n    /* match? include/macros.sibilant:681:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 21978,\n      line: 682,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \".\",\n        type: \"dots\",\n        start: 21979,\n        line: 682,\n        col: 9,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"match\",\n          type: \"literal\",\n          start: 21980,\n          line: 682,\n          col: 10,\n          length: 5,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        } ],\n        precedingIgnored: []\n      }, string, regexp ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"matchRegex__QUERY\"] = (function matchRegex__QUERY$(string, pattern, flags) {\n    /* match-regex? include/macros.sibilant:687:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 22214,\n      line: 688,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"match?\",\n        type: \"literal\",\n        start: 22215,\n        line: 688,\n        col: 9,\n        length: 6,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 22222,\n        line: 688,\n        col: 16,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"regex\",\n          type: \"literal\",\n          start: 22223,\n          line: 688,\n          col: 17,\n          length: 5,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, pattern, flags ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 22221,\n          line: 688,\n          col: 15,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      }, string ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.replace = (function replace$(string, pattern, replacement) {\n    /* replace include/macros.sibilant:694:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 22476,\n      line: 695,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \".\",\n        type: \"dots\",\n        start: 22477,\n        line: 695,\n        col: 9,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"replace\",\n          type: \"literal\",\n          start: 22478,\n          line: 695,\n          col: 10,\n          length: 7,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        } ],\n        precedingIgnored: []\n      }, string, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 22508,\n        line: 696,\n        col: 14,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"regex\",\n          type: \"literal\",\n          start: 22509,\n          line: 696,\n          col: 15,\n          length: 5,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, pattern ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"\\n\",\n          type: \"newline\",\n          start: 22493,\n          line: 695,\n          col: 25,\n          length: 1,\n          contents: []\n        }, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"              \",\n          type: \"whitespace\",\n          start: 22494,\n          line: 696,\n          col: 0,\n          length: 14,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      }, replacement ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.replaceAll = (function replaceAll$(string, pattern, replacement) {\n    /* replace-all include/macros.sibilant:702:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 22773,\n      line: 703,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \".\",\n        type: \"dots\",\n        start: 22774,\n        line: 703,\n        col: 9,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"replace\",\n          type: \"literal\",\n          start: 22775,\n          line: 703,\n          col: 10,\n          length: 7,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        } ],\n        precedingIgnored: []\n      }, string, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 22791,\n        line: 703,\n        col: 26,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"regex\",\n          type: \"literal\",\n          start: 22792,\n          line: 703,\n          col: 27,\n          length: 5,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, pattern, {\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"'\",\"type\":\"tick\",\"start\":22807,\"line\":703,\"col\":42,\"length\":1,\"contents\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\"g\",\"type\":\"literal\",\"start\":22808,\"line\":703,\"col\":43,\"length\":1,\"contents\":[],\"specials\":0,\"precedingIgnored\":[]}],\"precedingIgnored\":[{\"dir\":\"include\",\"file\":\"include/macros.sibilant\",\"token\":\" \",\"type\":\"whitespace\",\"start\":22806,\"line\":703,\"col\":41,\"length\":1,\"contents\":[]}]} ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 22790,\n          line: 703,\n          col: 25,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      }, replacement ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.thunk = (function thunk$(body) {\n    /* thunk include/macros.sibilant:716:0 */\n  \n    var body = Array.prototype.slice.call(arguments, 0);\n  \n    var node = this,\n        lambdaOptions = {\n      node: node,\n      args: []\n    };\n    (function() {\n      if (!(node__QUERY(body[0]))) {\n        mergeInto(lambdaOptions, body[0]);\n        return body = body.slice(1);\n      }\n    }).call(this);\n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 23396,\n      line: 724,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"lambda\",\n        type: \"literal\",\n        start: 23397,\n        line: 724,\n        col: 9,\n        length: 6,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, lambdaOptions ].concat(mapNode(body, (function(node) {\n        /* include/macros.sibilant:726:17 */\n      \n        return (function() {\n          if (node__QUERY(node, \"argPlaceholder\")) {\n            return {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \"(\",\n              type: \"expression\",\n              start: 23549,\n              line: 728,\n              col: 24,\n              length: 1,\n              contents: [ {\n                dir: \"include\",\n                file: \"include/macros.sibilant\",\n                token: \"argument\",\n                type: \"literal\",\n                start: 23550,\n                line: 728,\n                col: 25,\n                length: 8,\n                contents: [],\n                specials: 0,\n                precedingIgnored: []\n              }, node.token.replace((new RegExp(\"^#\", undefined)), \"\") ],\n              precedingIgnored: [],\n              specials: 0,\n              end: undefined,\n              closed: true,\n              closingIgnored: []\n            };\n          } else {\n            return node;\n          }\n        }).call(this);\n      }))),\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"#>\"] = sibilant.macros.namespaces.core.thunk;\n  sibilant.macros.namespaces.core.pipeThunk = (function pipeThunk$(calls) {\n    /* pipe-thunk include/macros.sibilant:739:0 */\n  \n    var calls = Array.prototype.slice.call(arguments, 0);\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 23930,\n      line: 739,\n      col: 30,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"thunk\",\n        type: \"literal\",\n        start: 23931,\n        line: 739,\n        col: 31,\n        length: 5,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, { node: this }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 23952,\n        line: 739,\n        col: 52,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"pipe\",\n          type: \"literal\",\n          start: 23953,\n          line: 739,\n          col: 53,\n          length: 4,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"#0\",\n          type: \"argPlaceholder\",\n          start: 23958,\n          line: 739,\n          col: 58,\n          length: 2,\n          contents: [],\n          specials: 0,\n          precedingIgnored: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \" \",\n            type: \"whitespace\",\n            start: 23957,\n            line: 739,\n            col: 57,\n            length: 1,\n            contents: []\n          } ]\n        } ].concat(calls),\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 23951,\n          line: 739,\n          col: 51,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      } ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"#->\"] = sibilant.macros.namespaces.core.pipeThunk;\n  sibilant.macros.namespaces.core.keys = (function keys$(obj) {\n    /* keys include/macros.sibilant:751:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 24264,\n      line: 752,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"Object.keys\",\n        type: \"literal\",\n        start: 24265,\n        line: 752,\n        col: 9,\n        length: 11,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, obj ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.delete = (function delete$(objects) {\n    /* delete include/macros.sibilant:764:0 */\n  \n    var objects = Array.prototype.slice.call(arguments, 0);\n  \n    return interleave(\"\\n\", map(objects, (function(obj) {\n      /* include/macros.sibilant:765:37 */\n    \n      return asStatement([ \"delete \", transpile(obj) ]);\n    })));\n  });\n  sibilant.macros.namespaces.core.deleteMacro = (function deleteMacro$(macroNames) {\n    /* delete-macro include/macros.sibilant:776:0 */\n  \n    var macroNames = Array.prototype.slice.call(arguments, 0);\n  \n    macroNames.forEach((function(macroName) {\n      /* include/macros.sibilant:777:7 */\n    \n      return delete sibilant.macros.namespace[outputFormatter(transpile(macroName))];\n    }));\n    return null;\n  });\n  sibilant.macros.namespaces.core.delmacro = sibilant.macros.namespaces.core.deleteMacro;\n  sibilant.macros.namespaces.core.renameMacro = (function renameMacro$(currentMacroName, newMacroName) {\n    /* rename-macro include/macros.sibilant:789:0 */\n  \n    sibilant.macros.namespaces.core.aliasMacro(currentMacroName, newMacroName);\n    sibilant.macros.namespaces.core.deleteMacro(currentMacroName);\n    return null;\n  });\n  sibilant.macros.namespaces.core.arguments = (function arguments$() {\n    /* arguments include/macros.sibilant:804:0 */\n  \n    return [ \"(Array.prototype.slice.apply(arguments))\" ];\n  });\n  sibilant.macros.namespaces.core.argument = (function argument$(index) {\n    /* argument include/macros.sibilant:816:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 25850,\n      line: 817,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"get\",\n        type: \"literal\",\n        start: 25851,\n        line: 817,\n        col: 9,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"arguments\",\n        type: \"literal\",\n        start: 25855,\n        line: 817,\n        col: 13,\n        length: 9,\n        contents: [],\n        specials: 0,\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 25854,\n          line: 817,\n          col: 12,\n          length: 1,\n          contents: []\n        } ]\n      }, index ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.eachKey = (function eachKey$(as, obj, body) {\n    /* each-key include/macros.sibilant:825:0 */\n  \n    var body = Array.prototype.slice.call(arguments, 2);\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 26058,\n      line: 826,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"pipe\",\n        type: \"literal\",\n        start: 26059,\n        line: 826,\n        col: 9,\n        length: 4,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, obj, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 26069,\n        line: 826,\n        col: 19,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"keys\",\n          type: \"literal\",\n          start: 26070,\n          line: 826,\n          col: 20,\n          length: 4,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        } ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 26068,\n          line: 826,\n          col: 18,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 26090,\n        line: 827,\n        col: 14,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \".\",\n          type: \"dots\",\n          start: 26091,\n          line: 827,\n          col: 15,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"for-each\",\n            type: \"literal\",\n            start: 26092,\n            line: 827,\n            col: 16,\n            length: 8,\n            contents: [],\n            specials: 0,\n            precedingIgnored: []\n          } ],\n          precedingIgnored: []\n        }, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"(\",\n          type: \"expression\",\n          start: 26101,\n          line: 827,\n          col: 25,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"lambda\",\n            type: \"literal\",\n            start: 26102,\n            line: 827,\n            col: 26,\n            length: 6,\n            contents: [],\n            specials: 0,\n            precedingIgnored: []\n          }, {\n            args: (function() {\n              if (node__QUERY(as, \"expression\")) {\n                return as;\n              } else {\n                return [ as ];\n              }\n            }).call(this),\n            node: this\n          } ].concat(body),\n          precedingIgnored: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \" \",\n            type: \"whitespace\",\n            start: 26100,\n            line: 827,\n            col: 24,\n            length: 1,\n            contents: []\n          } ],\n          specials: 0,\n          end: undefined,\n          closed: true,\n          closingIgnored: []\n        } ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"\\n\",\n          type: \"newline\",\n          start: 26075,\n          line: 826,\n          col: 25,\n          length: 1,\n          contents: []\n        }, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"              \",\n          type: \"whitespace\",\n          start: 26076,\n          line: 827,\n          col: 0,\n          length: 14,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      } ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.switch = (function switch$(obj, cases) {\n    /* switch include/macros.sibilant:848:0 */\n  \n    var cases = Array.prototype.slice.call(arguments, 1);\n  \n    return [ \"(function() {\", indent([ \"switch(\", transpile(obj), \") {\", map(cases, (function(caseDef) {\n      /* include/macros.sibilant:851:30 */\n    \n      var caseNameNode = caseDef.contents[0],\n          caseLabels = (function() {\n        if (node__QUERY(caseNameNode, \"expression\", \"bracket\")) {\n          return caseNameNode.contents;\n        } else {\n          return [ caseNameNode ];\n        }\n      }).call(this),\n          caseString = interleave(\"\\n\", map(caseLabels, (function(c) {\n        /* include/macros.sibilant:857:78 */\n      \n        return (function() {\n          if (\"default\" === c.token) {\n            return \"default:\";\n          } else {\n            return [ \"case \", transpile(c), \":\" ];\n          }\n        }).call(this);\n      })));\n      return [ \"\\n\", caseString, indent({\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 27747,\n        line: 861,\n        col: 59,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"do\",\n          type: \"literal\",\n          start: 27748,\n          line: 861,\n          col: 60,\n          length: 2,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        } ].concat(caseDef.contents.slice(1)),\n        precedingIgnored: [],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      }) ];\n    })), \"}\" ]), \"}).call(this)\" ];\n  });\n  sibilant.macros.namespaces.core.if = (function if$(alternatingConditionsAndBranches) {\n    /* if include/macros.sibilant:893:0 */\n  \n    var alternatingConditionsAndBranches = Array.prototype.slice.call(arguments, 0);\n  \n    return [ \"(function() {\", indent(interleave(\" else \", bulkMap(alternatingConditionsAndBranches, (function(cond, val) {\n      /* include/macros.sibilant:898:25 */\n    \n      return (function() {\n        if (typeof val !== \"undefined\") {\n          return [ \"if (\", transpile(cond), \") {\", indent({\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"(\",\n            type: \"expression\",\n            start: 29023,\n            line: 901,\n            col: 44,\n            length: 1,\n            contents: [ {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \"do\",\n              type: \"literal\",\n              start: 29024,\n              line: 901,\n              col: 45,\n              length: 2,\n              contents: [],\n              specials: 0,\n              precedingIgnored: []\n            }, val ],\n            precedingIgnored: [],\n            specials: 0,\n            end: undefined,\n            closed: true,\n            closingIgnored: []\n          }), \"}\" ];\n        } else {\n          return [ \"{\", indent({\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"(\",\n            type: \"expression\",\n            start: 29121,\n            line: 903,\n            col: 47,\n            length: 1,\n            contents: [ {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \"do\",\n              type: \"literal\",\n              start: 29122,\n              line: 903,\n              col: 48,\n              length: 2,\n              contents: [],\n              specials: 0,\n              precedingIgnored: []\n            }, cond ],\n            precedingIgnored: [],\n            specials: 0,\n            end: undefined,\n            closed: true,\n            closingIgnored: []\n          }), \"}\" ];\n        }\n      }).call(this);\n    })))), \"}).call(this)\" ];\n  });\n  sibilant.macros.namespaces.core.chain = (function chain$(object, calls) {\n    /* chain include/macros.sibilant:922:0 */\n  \n    var calls = Array.prototype.slice.call(arguments, 1);\n  \n    console.log(\"DEPRECATION WARNING: DO NOT USE CHAIN\");\n    console.log((\"  \" + this.file + \":\" + this.line + \":\" + this.col));\n    return (function() {\n      if (0 === calls.length) {\n        return transpile(object);\n      } else if (1 === calls.length) {\n        return {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"(\",\n          type: \"expression\",\n          start: 29664,\n          line: 926,\n          col: 31,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"send\",\n            type: \"literal\",\n            start: 29665,\n            line: 926,\n            col: 32,\n            length: 4,\n            contents: [],\n            specials: 0,\n            precedingIgnored: []\n          }, object ].concat(calls[0].contents),\n          precedingIgnored: [],\n          specials: 0,\n          end: undefined,\n          closed: true,\n          closingIgnored: []\n        };\n      } else {\n        var lines = map(calls, (function(call, index) {\n          /* include/macros.sibilant:928:34 */\n        \n          return [ \".\", transpile(call.contents[0]), \"(\", interleave(\", \", map(call.contents.slice(1), transpile)), \")\" ];\n        }));\n        return [ transpile(object), lines[0], \"\\n  \", recurseIndent(interleave(\"\\n\", lines.slice(1))) ];\n      }\n    }).call(this);\n  });\n  sibilant.macros.namespaces.core[\"instanceOf__QUERY\"] = (function instanceOf__QUERY$(item, type) {\n    /* instance-of? include/macros.sibilant:947:0 */\n  \n    return [ \"(\", transpile(item), \" instanceof \", transpile(type), \")\" ];\n  });\n  sibilant.macros.namespaces.core[\"includes__QUERY\"] = (function includes__QUERY$(haystack, needle) {\n    /* includes? include/macros.sibilant:958:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 30643,\n      line: 959,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"pipe\",\n        type: \"literal\",\n        start: 30644,\n        line: 959,\n        col: 9,\n        length: 4,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, haystack, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 30659,\n        line: 959,\n        col: 24,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \".\",\n          type: \"dots\",\n          start: 30660,\n          line: 959,\n          col: 25,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"index-of\",\n            type: \"literal\",\n            start: 30661,\n            line: 959,\n            col: 26,\n            length: 8,\n            contents: [],\n            specials: 0,\n            precedingIgnored: []\n          } ],\n          precedingIgnored: []\n        }, needle ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 30658,\n          line: 959,\n          col: 23,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 30679,\n        line: 959,\n        col: 44,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"!=\",\n          type: \"otherChar\",\n          start: 30680,\n          line: 959,\n          col: 45,\n          length: 2,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"-1\",\n          type: \"number\",\n          start: 30683,\n          line: 959,\n          col: 48,\n          length: 2,\n          contents: [],\n          specials: 0,\n          precedingIgnored: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \" \",\n            type: \"whitespace\",\n            start: 30682,\n            line: 959,\n            col: 47,\n            length: 1,\n            contents: []\n          } ]\n        } ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 30678,\n          line: 959,\n          col: 43,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      } ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"excludes__QUERY\"] = (function excludes__QUERY$(haystack, needle) {\n    /* excludes? include/macros.sibilant:971:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 30956,\n      line: 972,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"pipe\",\n        type: \"literal\",\n        start: 30957,\n        line: 972,\n        col: 9,\n        length: 4,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, haystack, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 30972,\n        line: 972,\n        col: 24,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \".\",\n          type: \"dots\",\n          start: 30973,\n          line: 972,\n          col: 25,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"index-of\",\n            type: \"literal\",\n            start: 30974,\n            line: 972,\n            col: 26,\n            length: 8,\n            contents: [],\n            specials: 0,\n            precedingIgnored: []\n          } ],\n          precedingIgnored: []\n        }, needle ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 30971,\n          line: 972,\n          col: 23,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 30992,\n        line: 972,\n        col: 44,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"=\",\n          type: \"otherChar\",\n          start: 30993,\n          line: 972,\n          col: 45,\n          length: 1,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"-1\",\n          type: \"number\",\n          start: 30995,\n          line: 972,\n          col: 47,\n          length: 2,\n          contents: [],\n          specials: 0,\n          precedingIgnored: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \" \",\n            type: \"whitespace\",\n            start: 30994,\n            line: 972,\n            col: 46,\n            length: 1,\n            contents: []\n          } ]\n        } ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 30991,\n          line: 972,\n          col: 43,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      } ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"exists__QUERY\"] = (function exists__QUERY$(thing) {\n    /* exists? include/macros.sibilant:982:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 31210,\n      line: 983,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"and\",\n        type: \"literal\",\n        start: 31211,\n        line: 983,\n        col: 9,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 31215,\n        line: 983,\n        col: 13,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"defined?\",\n          type: \"literal\",\n          start: 31216,\n          line: 983,\n          col: 14,\n          length: 8,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, thing ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 31214,\n          line: 983,\n          col: 12,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 31233,\n        line: 983,\n        col: 31,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"!=\",\n          type: \"otherChar\",\n          start: 31234,\n          line: 983,\n          col: 32,\n          length: 2,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, thing, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"null\",\n          type: \"literal\",\n          start: 31244,\n          line: 983,\n          col: 42,\n          length: 4,\n          contents: [],\n          specials: 0,\n          precedingIgnored: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \" \",\n            type: \"whitespace\",\n            start: 31243,\n            line: 983,\n            col: 41,\n            length: 1,\n            contents: []\n          } ]\n        } ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 31232,\n          line: 983,\n          col: 30,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      } ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.withState = (function withState$(k, v, body) {\n    /* with-state include/macros.sibilant:989:0 */\n  \n    var body = Array.prototype.slice.call(arguments, 2);\n  \n    var before = sibilant.macros.namespaces.core.state(k);\n    sibilant.macros.namespaces.core.state(k, v);\n    var returnValue = interleave(\"\\n\", map(body, transpile));\n    sibilant.macros.namespaces.core.state(k, before);\n    return returnValue;\n  });\n  sibilant.macros.namespaces.core.join = (function join$(arr, glue) {\n    /* join include/macros.sibilant:1011:0 */\n  \n    (function() {\n      if ((typeof glue !== \"undefined\" && typeof arr === \"undefined\")) {\n        arr = glue;\n        return glue = undefined;\n      }\n    }).call(this);\n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 31944,\n      line: 1014,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \".\",\n        type: \"dots\",\n        start: 31945,\n        line: 1014,\n        col: 9,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"join\",\n          type: \"literal\",\n          start: 31946,\n          line: 1014,\n          col: 10,\n          length: 4,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        } ],\n        precedingIgnored: []\n      }, arr, (glue || \"\\\"\\\"\") ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"_destructure\"] = (function _destructure$(pairs) {\n    /* *destructure include/macros.sibilant:1019:0 */\n  \n    var destructured = [];\n    bulkMap(pairs, (function(lhs, rhs) {\n      /* include/macros.sibilant:1021:21 */\n    \n      var transpiledRhs = transpile(rhs);\n      return (function() {\n        switch(lhs.type) {\n        case \"bracket\":\n          var literalRhs__QUERY = outputFormatter(transpiledRhs).match((new RegExp(\"^[\\._a-zA-Z0-9]+$\", undefined))),\n              source = (function() {\n            if (literalRhs__QUERY) {\n              return transpiledRhs;\n            } else {\n              var symbol = sibilant.macros.namespaces.core.symbol();\n              destructured.push([ symbol, transpiledRhs ]);\n              return symbol;\n            }\n          }).call(this);\n          lhs.contents.forEach((function(item, index) {\n            /* include/macros.sibilant:1031:32 */\n          \n            return destructured.push([ transpile(item), {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \"(\",\n              type: \"expression\",\n              start: 32902,\n              line: 1032,\n              col: 76,\n              length: 1,\n              contents: [ {\n                dir: \"include\",\n                file: \"include/macros.sibilant\",\n                token: \"get\",\n                type: \"literal\",\n                start: 32903,\n                line: 1032,\n                col: 77,\n                length: 3,\n                contents: [],\n                specials: 0,\n                precedingIgnored: []\n              }, source, index ],\n              precedingIgnored: [],\n              specials: 0,\n              end: undefined,\n              closed: true,\n              closingIgnored: []\n            } ]);\n          }));\n          return (function() {\n            if (!(literalRhs__QUERY)) {\n              return destructured.push([ source, \"undefined\" ]);\n            }\n          }).call(this);\n        \n        case \"brace\":\n          var literalRhs__QUERY = outputFormatter(transpiledRhs).match((new RegExp(\"^[\\._a-zA-Z0-9]+$\", undefined))),\n              source = (function() {\n            if (literalRhs__QUERY) {\n              return transpiledRhs;\n            } else {\n              var symbol = sibilant.macros.namespaces.core.symbol();\n              destructured.push([ symbol, transpiledRhs ]);\n              return symbol;\n            }\n          }).call(this);\n          lhs.contents.forEach((function(item, index) {\n            /* include/macros.sibilant:1042:32 */\n          \n            var trItem = transpile(item);\n            return destructured.push([ trItem, {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \"(\",\n              type: \"expression\",\n              start: 33853,\n              line: 1044,\n              col: 67,\n              length: 1,\n              contents: [ {\n                dir: \"include\",\n                file: \"include/macros.sibilant\",\n                token: \"get\",\n                type: \"literal\",\n                start: 33854,\n                line: 1044,\n                col: 68,\n                length: 3,\n                contents: [],\n                specials: 0,\n                precedingIgnored: []\n              }, source, [ \"\\\"\", trItem, \"\\\"\" ] ],\n              precedingIgnored: [],\n              specials: 0,\n              end: undefined,\n              closed: true,\n              closingIgnored: []\n            } ]);\n          }));\n          return (function() {\n            if (!(literalRhs__QUERY)) {\n              return destructured.push([ source, \"undefined\" ]);\n            }\n          }).call(this);\n        \n        default:\n          return destructured.push([ transpile(lhs), (function() {\n            if (rhs) {\n              return transpiledRhs;\n            } else {\n              return \"undefined\";\n            }\n          }).call(this) ]);\n        }\n      }).call(this);\n    }));\n    return destructured;\n  });\n  sibilant.macros.namespaces.core.var = (function var$(pairs) {\n    /* var include/macros.sibilant:1063:0 */\n  \n    var pairs = Array.prototype.slice.call(arguments, 0);\n  \n    return asStatement([ \"var \", interleave(map(sibilant.macros.namespaces.core[\"_destructure\"](pairs), (function(pair) {\n      /* include/macros.sibilant:1067:25 */\n    \n      return [ pair[0], \" = \", pair[1] ];\n    })), \",\\n    \") ]);\n  });\n  sibilant.macros.namespaces.core.assign = (function assign$(pairs) {\n    /* assign include/macros.sibilant:1085:0 */\n  \n    var pairs = Array.prototype.slice.call(arguments, 0);\n  \n    return interleave(map(sibilant.macros.namespaces.core[\"_destructure\"](pairs), (function(pair) {\n      /* include/macros.sibilant:1088:17 */\n    \n      return asStatement([ pair[0], \" = \", pair[1] ]);\n    })), \"\\n\");\n  });\n  sibilant.macros.namespaces.core.default = (function default$(pairs) {\n    /* default include/macros.sibilant:1096:0 */\n  \n    var pairs = Array.prototype.slice.call(arguments, 0);\n  \n    return interleave(\"\\n\", bulkMap(pairs, (function(name, value) {\n      /* include/macros.sibilant:1097:40 */\n    \n      return {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 35842,\n        line: 1098,\n        col: 35,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"assign\",\n          type: \"literal\",\n          start: 35843,\n          line: 1098,\n          col: 36,\n          length: 6,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, name, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"(\",\n          type: \"expression\",\n          start: 35856,\n          line: 1098,\n          col: 49,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"ternary\",\n            type: \"literal\",\n            start: 35857,\n            line: 1098,\n            col: 50,\n            length: 7,\n            contents: [],\n            specials: 0,\n            precedingIgnored: []\n          }, {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"(\",\n            type: \"expression\",\n            start: 35865,\n            line: 1098,\n            col: 58,\n            length: 1,\n            contents: [ {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \"defined?\",\n              type: \"literal\",\n              start: 35866,\n              line: 1098,\n              col: 59,\n              length: 8,\n              contents: [],\n              specials: 0,\n              precedingIgnored: []\n            }, name ],\n            precedingIgnored: [ {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \" \",\n              type: \"whitespace\",\n              start: 35864,\n              line: 1098,\n              col: 57,\n              length: 1,\n              contents: []\n            } ],\n            specials: 0,\n            end: undefined,\n            closed: true,\n            closingIgnored: []\n          }, name, value ],\n          precedingIgnored: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \" \",\n            type: \"whitespace\",\n            start: 35855,\n            line: 1098,\n            col: 48,\n            length: 1,\n            contents: []\n          } ],\n          specials: 0,\n          end: undefined,\n          closed: true,\n          closingIgnored: []\n        } ],\n        precedingIgnored: [],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      };\n    })));\n  });\n  sibilant.macros.namespaces.core.importNamespace = (function importNamespace$(namespace) {\n    /* import-namespace include/macros.sibilant:1101:0 */\n  \n    var namespaceAsString = outputFormatter(transpile(namespace));\n    (function() {\n      if (!(sibilant.macros.namespaces.hasOwnProperty(namespaceAsString))) {\n        return sibilant.macros.namespaces[namespaceAsString] = {  };\n      }\n    }).call(this);\n    sibilant.macros.searchPath.unshift(namespaceAsString);\n    return undefined;\n  });\n  sibilant.macros.namespaces.core.namespace = (function namespace$(namespace) {\n    /* namespace include/macros.sibilant:1109:0 */\n  \n    sibilant.macros.namespaces.core.importNamespace(namespace);\n    sibilant.macros.namespace = sibilant.macros.namespaces[outputFormatter(transpile(namespace))];\n    return undefined;\n  });\n  sibilant.macros.namespaces.core[\"hasKey__QUERY\"] = (function hasKey__QUERY$(object, key) {\n    /* has-key? include/macros.sibilant:1124:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 36650,\n      line: 1125,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \".\",\n        type: \"dots\",\n        start: 36651,\n        line: 1125,\n        col: 9,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"has-own-property\",\n          type: \"literal\",\n          start: 36652,\n          line: 1125,\n          col: 10,\n          length: 16,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        } ],\n        precedingIgnored: []\n      }, object, key ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.get = (function get$(obj, keys) {\n    /* get include/macros.sibilant:1146:0 */\n  \n    var keys = Array.prototype.slice.call(arguments, 1);\n  \n    return [ transpile(obj), map(keys, (function(key) {\n      /* include/macros.sibilant:1148:19 */\n    \n      var transpiled = transpile(key),\n          output = outputFormatter(transpiled);\n      return (function() {\n        if (output.match((new RegExp(\"^\\\"[a-zA-Z0-9]+\\\"$\", undefined)))) {\n          return [ \".\", output.replace((new RegExp(\"\\\"\", \"g\")), \"\") ];\n        } else {\n          return [ \"[\", transpiled, \"]\" ];\n        }\n      }).call(this);\n    })) ];\n  });\n  sibilant.macros.namespaces.core.set = (function set$(arr, kvPairs) {\n    /* set include/macros.sibilant:1175:0 */\n  \n    var kvPairs = Array.prototype.slice.call(arguments, 1);\n  \n    return interleave(\"\\n\", bulkMap(kvPairs, (function(k, v) {\n      /* include/macros.sibilant:1176:43 */\n    \n      return {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 38318,\n        line: 1176,\n        col: 52,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"assign\",\n          type: \"literal\",\n          start: 38319,\n          line: 1176,\n          col: 53,\n          length: 6,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"(\",\n          type: \"expression\",\n          start: 38326,\n          line: 1176,\n          col: 60,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"get\",\n            type: \"literal\",\n            start: 38327,\n            line: 1176,\n            col: 61,\n            length: 3,\n            contents: [],\n            specials: 0,\n            precedingIgnored: []\n          }, arr, k ],\n          precedingIgnored: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \" \",\n            type: \"whitespace\",\n            start: 38325,\n            line: 1176,\n            col: 59,\n            length: 1,\n            contents: []\n          } ],\n          specials: 0,\n          end: undefined,\n          closed: true,\n          closingIgnored: []\n        }, v ],\n        precedingIgnored: [],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      };\n    })));\n  });\n  sibilant.macros.namespaces.core[\"lowerCase__QUERY\"] = (function lowerCase__QUERY$(str) {\n    /* lower-case? include/macros.sibilant:1181:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 38515,\n      line: 1182,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"=\",\n        type: \"otherChar\",\n        start: 38516,\n        line: 1182,\n        col: 9,\n        length: 1,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 38518,\n        line: 1182,\n        col: 11,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \".\",\n          type: \"dots\",\n          start: 38519,\n          line: 1182,\n          col: 12,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"to-lower-case\",\n            type: \"literal\",\n            start: 38520,\n            line: 1182,\n            col: 13,\n            length: 13,\n            contents: [],\n            specials: 0,\n            precedingIgnored: []\n          } ],\n          precedingIgnored: []\n        }, str ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 38517,\n          line: 1182,\n          col: 10,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      }, str ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"upperCase__QUERY\"] = (function upperCase__QUERY$(str) {\n    /* upper-case? include/macros.sibilant:1189:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 38716,\n      line: 1190,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"=\",\n        type: \"otherChar\",\n        start: 38717,\n        line: 1190,\n        col: 9,\n        length: 1,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 38719,\n        line: 1190,\n        col: 11,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \".\",\n          type: \"dots\",\n          start: 38720,\n          line: 1190,\n          col: 12,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"to-upper-case\",\n            type: \"literal\",\n            start: 38721,\n            line: 1190,\n            col: 13,\n            length: 13,\n            contents: [],\n            specials: 0,\n            precedingIgnored: []\n          } ],\n          precedingIgnored: []\n        }, str ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 38718,\n          line: 1190,\n          col: 10,\n          length: 1,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      }, str ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.sourceMappingUrl = (function sourceMappingUrl$(url) {\n    /* source-mapping-url include/macros.sibilant:1197:0 */\n  \n    return [ \"//# sourceMappingURL=\", eval(outputFormatter(transpile(url))), \"\\n\" ];\n  });\n  sibilant.macros.namespaces.core.sortBy = (function sortBy$(arrayOfObjects, attribute) {\n    /* sort-by include/macros.sibilant:1206:0 */\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 39355,\n      line: 1207,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \".\",\n        type: \"dots\",\n        start: 39356,\n        line: 1207,\n        col: 9,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"sort\",\n          type: \"literal\",\n          start: 39357,\n          line: 1207,\n          col: 10,\n          length: 4,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        } ],\n        precedingIgnored: []\n      }, arrayOfObjects, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"(\",\n        type: \"expression\",\n        start: 39395,\n        line: 1208,\n        col: 15,\n        length: 1,\n        contents: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"#->\",\n          type: \"otherChar\",\n          start: 39396,\n          line: 1208,\n          col: 16,\n          length: 3,\n          contents: [],\n          specials: 0,\n          precedingIgnored: []\n        }, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"(\",\n          type: \"expression\",\n          start: 39400,\n          line: 1208,\n          col: 20,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"get\",\n            type: \"literal\",\n            start: 39401,\n            line: 1208,\n            col: 21,\n            length: 3,\n            contents: [],\n            specials: 0,\n            precedingIgnored: []\n          }, attribute ],\n          precedingIgnored: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \" \",\n            type: \"whitespace\",\n            start: 39399,\n            line: 1208,\n            col: 19,\n            length: 1,\n            contents: []\n          } ],\n          specials: 0,\n          end: undefined,\n          closed: true,\n          closingIgnored: []\n        }, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \".\",\n          type: \"dots\",\n          start: 39437,\n          line: 1209,\n          col: 20,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"to-string\",\n            type: \"literal\",\n            start: 39438,\n            line: 1209,\n            col: 21,\n            length: 9,\n            contents: [],\n            specials: 0,\n            precedingIgnored: []\n          } ],\n          precedingIgnored: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"\\n\",\n            type: \"newline\",\n            start: 39416,\n            line: 1208,\n            col: 36,\n            length: 1,\n            contents: []\n          }, {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"                    \",\n            type: \"whitespace\",\n            start: 39417,\n            line: 1209,\n            col: 0,\n            length: 20,\n            contents: []\n          } ]\n        }, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"(\",\n          type: \"expression\",\n          start: 39468,\n          line: 1210,\n          col: 20,\n          length: 1,\n          contents: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \".\",\n            type: \"dots\",\n            start: 39469,\n            line: 1210,\n            col: 21,\n            length: 1,\n            contents: [ {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \"locale-compare\",\n              type: \"literal\",\n              start: 39470,\n              line: 1210,\n              col: 22,\n              length: 14,\n              contents: [],\n              specials: 0,\n              precedingIgnored: []\n            } ],\n            precedingIgnored: []\n          }, {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"(\",\n            type: \"expression\",\n            start: 39485,\n            line: 1210,\n            col: 37,\n            length: 1,\n            contents: [ {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \"get\",\n              type: \"literal\",\n              start: 39486,\n              line: 1210,\n              col: 38,\n              length: 3,\n              contents: [],\n              specials: 0,\n              precedingIgnored: []\n            }, {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \"#1\",\n              type: \"argPlaceholder\",\n              start: 39490,\n              line: 1210,\n              col: 42,\n              length: 2,\n              contents: [],\n              specials: 0,\n              precedingIgnored: [ {\n                dir: \"include\",\n                file: \"include/macros.sibilant\",\n                token: \" \",\n                type: \"whitespace\",\n                start: 39489,\n                line: 1210,\n                col: 41,\n                length: 1,\n                contents: []\n              } ]\n            }, attribute ],\n            precedingIgnored: [ {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \" \",\n              type: \"whitespace\",\n              start: 39484,\n              line: 1210,\n              col: 36,\n              length: 1,\n              contents: []\n            } ],\n            specials: 0,\n            end: undefined,\n            closed: true,\n            closingIgnored: []\n          } ],\n          precedingIgnored: [ {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"\\n\",\n            type: \"newline\",\n            start: 39447,\n            line: 1209,\n            col: 30,\n            length: 1,\n            contents: []\n          }, {\n            dir: \"include\",\n            file: \"include/macros.sibilant\",\n            token: \"                    \",\n            type: \"whitespace\",\n            start: 39448,\n            line: 1210,\n            col: 0,\n            length: 20,\n            contents: []\n          } ],\n          specials: 0,\n          end: undefined,\n          closed: true,\n          closingIgnored: []\n        } ],\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"\\n\",\n          type: \"newline\",\n          start: 39379,\n          line: 1207,\n          col: 32,\n          length: 1,\n          contents: []\n        }, {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \"               \",\n          type: \"whitespace\",\n          start: 39380,\n          line: 1208,\n          col: 0,\n          length: 15,\n          contents: []\n        } ],\n        specials: 0,\n        end: undefined,\n        closed: true,\n        closingIgnored: []\n      } ],\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core[\"require__BANG\"] = (function require__BANG$(requires) {\n    /* require! include/macros.sibilant:1213:0 */\n  \n    var requires = Array.prototype.slice.call(arguments, 0);\n  \n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 39549,\n      line: 1214,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"var\",\n        type: \"literal\",\n        start: 39550,\n        line: 1214,\n        col: 9,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      } ].concat(inject([], requires, (function(pairs, node) {\n        /* include/macros.sibilant:1215:25 */\n      \n        return pairs.concat((function() {\n          if ((0 === (pairs.length % 2) && node__QUERY(node, \"tick\", \"string\"))) {\n            return [ mergeInto(clone(node), {\n              token: outputFormatter(transpile(node)).slice(1, -1),\n              contents: [],\n              type: \"literal\"\n            }), {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \"(\",\n              type: \"expression\",\n              start: 40158,\n              line: 1225,\n              col: 33,\n              length: 1,\n              contents: [ {\n                dir: \"include\",\n                file: \"include/macros.sibilant\",\n                token: \"require\",\n                type: \"literal\",\n                start: 40159,\n                line: 1225,\n                col: 34,\n                length: 7,\n                contents: [],\n                specials: 0,\n                precedingIgnored: []\n              }, node ],\n              precedingIgnored: [],\n              specials: 0,\n              end: undefined,\n              closed: true,\n              closingIgnored: []\n            } ];\n          } else if (1 === (pairs.length % 2)) {\n            return [ {\n              dir: \"include\",\n              file: \"include/macros.sibilant\",\n              token: \"(\",\n              type: \"expression\",\n              start: 40266,\n              line: 1228,\n              col: 36,\n              length: 1,\n              contents: [ {\n                dir: \"include\",\n                file: \"include/macros.sibilant\",\n                token: \"require\",\n                type: \"literal\",\n                start: 40267,\n                line: 1228,\n                col: 37,\n                length: 7,\n                contents: [],\n                specials: 0,\n                precedingIgnored: []\n              }, node ],\n              precedingIgnored: [],\n              specials: 0,\n              end: undefined,\n              closed: true,\n              closingIgnored: []\n            } ];\n          } else {\n            return [ node ];\n          }\n        }).call(this));\n      }))),\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  sibilant.macros.namespaces.core.export = (function export$(localVars) {\n    /* export include/macros.sibilant:1233:0 */\n  \n    var localVars = Array.prototype.slice.call(arguments, 0);\n  \n    var pairs = localVars.reduce((function(acc, value) {\n      /* include/macros.sibilant:1235:19 */\n    \n      return acc.concat([ sibilant.macros.namespaces.core.quote(value), value ]);\n    }), []);\n    return {\n      dir: \"include\",\n      file: \"include/macros.sibilant\",\n      token: \"(\",\n      type: \"expression\",\n      start: 40509,\n      line: 1237,\n      col: 8,\n      length: 1,\n      contents: [ {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"set\",\n        type: \"literal\",\n        start: 40510,\n        line: 1237,\n        col: 9,\n        length: 3,\n        contents: [],\n        specials: 0,\n        precedingIgnored: []\n      }, {\n        dir: \"include\",\n        file: \"include/macros.sibilant\",\n        token: \"exports\",\n        type: \"literal\",\n        start: 40514,\n        line: 1237,\n        col: 13,\n        length: 7,\n        contents: [],\n        specials: 0,\n        precedingIgnored: [ {\n          dir: \"include\",\n          file: \"include/macros.sibilant\",\n          token: \" \",\n          type: \"whitespace\",\n          start: 40513,\n          line: 1237,\n          col: 12,\n          length: 1,\n          contents: []\n        } ]\n      } ].concat(pairs),\n      precedingIgnored: [],\n      specials: 0,\n      end: undefined,\n      closed: true,\n      closingIgnored: []\n    };\n  });\n  var docs = sibilant.docs = {\n    definitions: [],\n    undocumented: {  }\n  };\n  docs.record = (function docs$record$(type, namespace, name, node) {\n    /* docs.record src/docs.sibilant:4:0 */\n  \n    var doc = docs.lastDoc;\n    (function() {\n      if (typeof doc !== \"undefined\") {\n        delete sibilant.docs.undocumented[name];\n        return sibilant.docs.definitions.push(mergeInto(doc, {\n          name: name,\n          type: type,\n          namespace: namespace,\n          definition: node\n        }));\n      } else {\n        return sibilant.docs.undocumented[name] = true;\n      }\n    }).call(this);\n    return delete sibilant.docs.lastDoc;\n  });\n  docs.tags = (function docs$tags$() {\n    /* docs.tags src/docs.sibilant:16:0 */\n  \n    var tags = flatten(pluck(docs.definitions, \"tags\")),\n        counts = {  };\n    tags.forEach((function(tag) {\n      /* src/docs.sibilant:19:5 */\n    \n      return counts[tag] = ((counts[tag] || 0) + 1);\n    }));\n    return counts;\n  });\n  docs.text = (function docs$text$() {\n    /* docs.text src/docs.sibilant:27:0 */\n  \n    return docs.definitions.map((function(definition) {\n      /* src/docs.sibilant:29:15 */\n    \n      return (\"name: \" + definition.type + \" \" + definition.namespace + \"/\" + prettify(definition.name) + \"\\n\" + \"description: \" + definition.docString + \"\\n\" + (function() {\n        if (definition.references) {\n          return (\"references:\\n  \" + (definition.references.map((function() {\n            /* src/docs.sibilant:35:51 */\n          \n            return eval(outputFormatter(transpile(arguments[0])));\n          })).join(\"\\n  \") + \"\\n\"));\n        } else {\n          return \"\";\n        }\n      }).call(this) + (function() {\n        if (definition.tags) {\n          return (\"tags: \" + definition.tags.join(\", \") + \"\\n\");\n        } else {\n          return \"\";\n        }\n      }).call(this) + \"arguments: \" + prettify(definition.definition.contents[2]) + \"\\n\" + \"examples: \\n\" + (definition.examples || []).map((function() {\n        /* src/docs.sibilant:46:43 */\n      \n        return (prettify(arguments[0], true) + \"\\n\" + outputFormatter(transpile(arguments[0])));\n      })).join(\"\\n\\n\") + \"\\n\\n\");\n    })).join(\"\");\n  });\n  docs.textNoColor = (function docs$textNoColor$() {\n    /* docs.text-no-color src/docs.sibilant:53:0 */\n  \n    var stripAnsi = __webpack_require__(765);\n    return stripAnsi(docs.text());\n  });\n  docs.json = (function docs$json$() {\n    /* docs.json src/docs.sibilant:58:0 */\n  \n    return JSON.stringify(docs.data());\n  });\n  docs.data = (function docs$data$() {\n    /* docs.data src/docs.sibilant:61:0 */\n  \n    return docs.definitions.map((function(definition) {\n      /* src/docs.sibilant:63:6 */\n    \n      return {\n        name: prettify(definition.name, false),\n        namespace: definition.namespace,\n        type: definition.type,\n        description: definition.docString,\n        references: (function() {\n          if (definition.references) {\n            return definition.references.map((function() {\n              /* src/docs.sibilant:69:52 */\n            \n              return arguments[0].token.slice(1, -1);\n            }));\n          } else {\n            return [];\n          }\n        }).call(this),\n        arguments: definition.definition.contents[2].contents.map((function() {\n          /* src/docs.sibilant:74:30 */\n        \n          return prettify(arguments[0], false);\n        })),\n        definition: prettify(definition.definition, false),\n        examples: (definition.examples || []).map((function() {\n          /* src/docs.sibilant:77:29 */\n        \n          return {\n            javascript: outputFormatter(transpile(arguments[0])),\n            sibilant: prettify(arguments[0], false)\n          };\n        })),\n        tags: definition.tags\n      };\n    }));\n  });\n  var tap = (function tap$(item, fn) {\n    /* tap src/helpers.sibilant:3:0 */\n  \n    fn(item);\n    return item;\n  });\n  var recurseIndent = (function recurseIndent$(args) {\n    /* recurse-indent src/helpers.sibilant:7:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return map(args, (function(arg) {\n      /* src/helpers.sibilant:9:10 */\n    \n      return (function() {\n        if (node__QUERY(arg)) {\n          return mergeInto(arg, { contents: recurseIndent.apply(this, compact(flatten(arg.contents))) });\n        } else if (((arg) && typeof (arg) === \"object\" && (arg).constructor.name === \"Array\")) {\n          return recurseIndent.apply(this, arg);\n        } else if (typeof arg === \"number\") {\n          return arg.toString();\n        } else if (typeof arg === \"string\") {\n          return arg.replace((new RegExp(\"\\\\n\", \"g\")), \"\\n  \").replace((new RegExp(\"\\\\n\\\\s+\\\\n\", \"g\")), \"\\n\\n\");\n        } else {\n          return arg;\n        }\n      }).call(this);\n    }));\n  });\n  var indent = (function indent$(args) {\n    /* indent src/helpers.sibilant:24:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return [ \"\\n  \", recurseIndent(map(args, transpile)), \"\\n\" ];\n  });\n  var escapeRegex = (function escapeRegex$(string) {\n    /* escape-regex src/helpers.sibilant:27:0 */\n  \n    return string.replace((new RegExp(\"[\\\\-\\\\[\\\\]\\\\/\\\\{\\\\}\\\\(\\\\)\\\\*\\\\+\\\\?\\\\.\\\\\\\\\\^\\\\$\\\\|]\", \"g\")), \"\\\\$&\");\n  });\n  var qescape = (function qescape$(content) {\n    /* qescape src/helpers.sibilant:30:0 */\n  \n    return (function() {\n      if (!((typeof content !== \"undefined\" && content !== null))) {\n        return \"\";\n      } else if (typeof content === \"string\") {\n        return content.split(\"\\\\\\\\ \"[0]).join(\"\\\\\\\\ \".slice(0, -1)).replace((new RegExp(\"\\\"\", \"g\")), \"\\\\\\\"\").replace((new RegExp(\"\\\\n\", \"g\")), \"\\\\n\\\" +\\n\\\"\");\n      } else {\n        return content;\n      }\n    }).call(this);\n  });\n  var mapNode = (function mapNode$(node, fn) {\n    /* map-node src/helpers.sibilant:39:0 */\n  \n    return (function() {\n      if (node__QUERY(node)) {\n        var mappedNode = fn(node);\n        (function() {\n          if (node__QUERY(mappedNode)) {\n            return mappedNode.contents = mapNode(mappedNode.contents, fn);\n          }\n        }).call(this);\n        return mappedNode;\n      } else if (((node) && typeof (node) === \"object\" && (node).constructor.name === \"Array\")) {\n        return map(node, (function() {\n          /* src/helpers.sibilant:48:32 */\n        \n          return mapNode(arguments[0], fn);\n        }));\n      } else {\n        return fn(node);\n      }\n    }).call(this);\n  });\n  var eachNode = (function eachNode$(node, fn) {\n    /* each-node src/helpers.sibilant:51:0 */\n  \n    return (function() {\n      if (node__QUERY(node)) {\n        return (function() {\n          if (fn(node)) {\n            return eachNode(node.contents, fn);\n          }\n        }).call(this);\n      } else if (((node) && typeof (node) === \"object\" && (node).constructor.name === \"Array\")) {\n        return node.forEach((function(c) {\n          /* src/helpers.sibilant:53:22 */\n        \n          return eachNode(c, fn);\n        }));\n      } else {\n        return fn(node);\n      }\n    }).call(this);\n  });\n  var statement__QUERY = (function statement__QUERY$(transpiled) {\n    /* statement? src/helpers.sibilant:56:0 */\n  \n    return (function() {\n      if (node__QUERY(transpiled)) {\n        return statement__QUERY(transpiled.contents);\n      } else if (((transpiled) && typeof (transpiled) === \"object\" && (transpiled).constructor.name === \"Array\")) {\n        return statement__QUERY(transpiled.slice(-1)[0]);\n      } else if (typeof transpiled === \"string\") {\n        return \";\" === transpiled.slice(-1)[0];\n      } else {\n        return false;\n      }\n    }).call(this);\n  });\n  var asStatement = (function asStatement$(node) {\n    /* as-statement src/helpers.sibilant:62:0 */\n  \n    var transpiled = transpile(node);\n    return (function() {\n      if (emptyNode__QUERY(transpiled)) {\n        return undefined;\n      } else if (statement__QUERY(transpiled)) {\n        return transpiled;\n      } else {\n        return [ transpiled, \";\" ];\n      }\n    }).call(this);\n  });\n  var unquote__QUERY = (function unquote__QUERY$(node) {\n    /* unquote? src/helpers.sibilant:69:0 */\n  \n    return node__QUERY(node, \"at\");\n  });\n  var findUnquotes = (function findUnquotes$(node) {\n    /* find-unquotes src/helpers.sibilant:71:0 */\n  \n    var unquotes = {  };\n    eachNode(node, (function(n) {\n      /* src/helpers.sibilant:73:21 */\n    \n      (function() {\n        if (unquote__QUERY(n)) {\n          return unquotes[n.nodeId] = transpile(n);\n        }\n      }).call(this);\n      return !(node__QUERY(n, \"tick\"));\n    }));\n    return unquotes;\n  });\n  var spliceDots = (function spliceDots$(node) {\n    /* splice-dots src/helpers.sibilant:79:0 */\n  \n    (function() {\n      if ((node && ((node.contents) && typeof (node.contents) === \"object\" && (node.contents).constructor.name === \"Array\"))) {\n        var contents = [];\n        node.contents.forEach((function(content) {\n          /* src/helpers.sibilant:82:11 */\n        \n          return (function() {\n            if ((node__QUERY(content, \"dots\") && ((content.contents) && typeof (content.contents) === \"object\" && (content.contents).constructor.name === \"Array\") && content.contents.length === 1 && ((content.contents[0]) && typeof (content.contents[0]) === \"object\" && (content.contents[0]).constructor.name === \"Array\"))) {\n              return contents.push.apply(contents, content.contents[0]);\n            } else {\n              return contents.push(content);\n            }\n          }).call(this);\n        }));\n        return node.contents = contents;\n      }\n    }).call(this);\n    return node;\n  });\n  var alternatingKeysAndValues = (function alternatingKeysAndValues$(hash) {\n    /* alternating-keys-and-values src/helpers.sibilant:94:0 */\n  \n    return flatten(map(Object.keys(hash), (function(key) {\n      /* src/helpers.sibilant:96:19 */\n    \n      return [ key, hash[key] ];\n    })));\n  });\n  var mapNodeForQuoteExpansion = (function mapNodeForQuoteExpansion$(node, expansions) {\n    /* map-node-for-quote-expansion src/helpers.sibilant:99:0 */\n  \n    return (function() {\n      if (node__QUERY(node)) {\n        var mappedNode = (function() {\n          if (expansions.hasOwnProperty(node.nodeId)) {\n            return expansions[node.nodeId];\n          } else {\n            return clone(node);\n          }\n        }).call(this);\n        (function() {\n          if (node__QUERY(mappedNode)) {\n            return mappedNode.contents = mapNodeForQuoteExpansion(mappedNode.contents, expansions);\n          }\n        }).call(this);\n        mappedNode = spliceDots(mappedNode);\n        return mappedNode;\n      } else if (((node) && typeof (node) === \"object\" && (node).constructor.name === \"Array\")) {\n        return map(node, (function() {\n          /* src/helpers.sibilant:110:19 */\n        \n          return mapNodeForQuoteExpansion(arguments[0], expansions);\n        }));\n      } else {\n        return node;\n      }\n    }).call(this);\n  });\n  sibilant.macros.namespaces.core.return = (function sibilant$macros$namespaces$core$return$(token) {\n    /* ^return src/core.sibilant:1:0 */\n  \n    (function() {\n      if (sibilant.debug) {\n        return console.log(\"returning \", prettify(token));\n      }\n    }).call(this);\n    var defaultReturn = asStatement([ \"return \", transpile(token) ]);\n    return (function() {\n      if ((token && token.contents && token.contents.length)) {\n        return (function() {\n          switch(token.contents[0].token) {\n          case \"return\":\n          case \"throw\":\n          case \"do\":\n            return transpile(token);\n          \n          case \"delete\":\n            var deleteMacro = macros.delete;\n            return (function() {\n              if (token.contents.length < 3) {\n                return defaultReturn;\n              } else {\n                return [ asStatement(deleteMacro.apply(this, token.contents.slice(1, -1))), \"\\nreturn \", asStatement(deleteMacro(token.contents.slice(-1)[0])) ];\n              }\n            }).call(this);\n          \n          case \"def\":\n            return [ transpile(token), \"\\n\", sibilant.macros.namespaces.core.return(token.contents[1]) ];\n          \n          case \"assign\":\n            return (function() {\n              if (token.contents.length < 4) {\n                return defaultReturn;\n              } else {\n                var result = clone(transpile(token));\n                result.contents = result.contents.slice(0, -4).concat([ \"return \" ], result.contents.slice(-4));\n                return result;\n              }\n            }).call(this);\n          \n          case \"var\":\n            return [ transpile(token), \"\\n\", sibilant.macros.namespaces.core.return((function() {\n              if (0 === (token.contents.length % 2)) {\n                return token.contents.slice(-1)[0];\n              } else {\n                return token.contents.slice(-2)[0];\n              }\n            }).call(this)) ];\n          \n          case \"set\":\n            return (function() {\n              if (token.contents.length < 5) {\n                return defaultReturn;\n              } else {\n                var obj = token.contents[1],\n                    nonReturnPart = token.contents.slice(2, (token.contents.length - 2)),\n                    returnPart = token.contents.slice(-2);\n                nonReturnPart.unshift(obj);\n                returnPart.unshift(obj);\n                return [ sibilant.macros.namespaces.core.set.apply(this, nonReturnPart), \"\\nreturn \", sibilant.macros.namespaces.core.set.apply(this, returnPart) ];\n              }\n            }).call(this);\n          \n          default:\n            return defaultReturn;\n          }\n        }).call(this);\n      } else {\n        return defaultReturn;\n      }\n    }).call(this);\n  });\n  sibilant.macros.namespaces.core.do = (function sibilant$macros$namespaces$core$do$(body) {\n    /* ^do src/core.sibilant:48:0 */\n  \n    var body = Array.prototype.slice.call(arguments, 0);\n  \n    return (function() {\n      if (1 === body.length) {\n        return sibilant.macros.namespaces.core.return(body[0]);\n      } else if (body.length) {\n        return [ interleave(map(body.slice(0, -1), (function() {\n          /* src/core.sibilant:56:19 */\n        \n          return asStatement(arguments[0]);\n        })), \"\\n\"), \"\\n\", sibilant.macros.namespaces.core.return(body.slice(-1)[0]) ];\n      } else {\n        return \"\";\n      }\n    }).call(this);\n  });\n  sibilant.macros.namespaces.core.emptyList = (function sibilant$macros$namespaces$core$emptyList$() {\n    /* ^empty-list src/core.sibilant:63:0 */\n  \n    return \"null\";\n  });\n  sibilant.macros.namespaces.core.def = (function sibilant$macros$namespaces$core$def$(fnName, args, body) {\n    /* ^def src/core.sibilant:65:0 */\n  \n    var body = Array.prototype.slice.call(arguments, 2);\n  \n    (function() {\n      if (typeof fnName === \"undefined\") {\n        return error(\"invalid function definition. missing name.\");\n      } else if (typeof args === \"undefined\") {\n        return error(\"invalid function definition. missing arguments or return value.\");\n      }\n    }).call(this);\n    var fnNameTr = transpile(fnName),\n        thisNode = this;\n    sibilant.docs.record(\"function\", sibilant.macros.searchPath[0], fnName, this);\n    return asStatement([ (function() {\n      if (outputFormatter(fnNameTr).match((new RegExp(\"\\\\.\", undefined)))) {\n        return \"\";\n      } else {\n        return \"var \";\n      }\n    }).call(this), fnNameTr, \" = \", sibilant.macros.namespaces.core.lambda.apply(this, [ {\n      name: fnName,\n      args: args,\n      node: thisNode\n    } ].concat(body)) ]);\n  });\n  sibilant.macros.namespaces.core.macro = (function sibilant$macros$namespaces$core$macro$(name, args, body) {\n    /* ^macro src/core.sibilant:77:0 */\n  \n    var body = Array.prototype.slice.call(arguments, 2);\n  \n    var nameTr = outputFormatter(transpile(name)),\n        options = {\n      name: name,\n      args: args,\n      node: this\n    },\n        js = outputFormatter(sibilant.macros.namespaces.core.lambda.apply(this, [ options ].concat(body)));\n    (function() {\n      if (sibilant.debug) {\n        return console.log(js);\n      }\n    }).call(this);\n    sibilant.docs.record(\"macro\", sibilant.macros.searchPath[0], name, this);\n    var evaledJs = (function() {\n      try {\n        return eval(js);\n      } catch (e) {\n        console.log(e.message);\n        console.log(red(e.stack.split(\"\\n\")[1]));\n        return console.log((\"error in parsing macro \" + sibilant.prettyPrint(name) + \":\\n\" + js));\n      }\n    }).call(this);\n    sibilant.macros.namespace[nameTr] = evaledJs;\n    return undefined;\n  });\n  sibilant.macros.namespaces.core.meta = (function sibilant$macros$namespaces$core$meta$(body) {\n    /* ^meta src/core.sibilant:97:0 */\n  \n    var body = Array.prototype.slice.call(arguments, 0);\n  \n    var js = outputFormatter(transpile(sibilant.macros.namespaces.core.scoped.apply(this, body)));\n    (function() {\n      if (sibilant.debug) {\n        return console.log(js);\n      }\n    }).call(this);\n    return outputFormatter(eval(js));\n  });\n  sibilant.macros.namespaces.core.concat = (function sibilant$macros$namespaces$core$concat$(args) {\n    /* ^concat src/core.sibilant:103:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    return [ \"(\", interleave(\" + \", map(args, transpile)), \")\" ];\n  });\n  sibilant.macros.namespaces.core.reverse = (function sibilant$macros$namespaces$core$reverse$(arr) {\n    /* ^reverse src/core.sibilant:106:0 */\n  \n    var reversed = [];\n    arr.forEach((function(item) {\n      /* src/core.sibilant:108:5 */\n    \n      return reversed.unshift(item);\n    }));\n    return reversed;\n  });\n  var reverse = sibilant.macros.namespaces.core.reverse;\n  sibilant.macros.namespaces.core.lambda = (function sibilant$macros$namespaces$core$lambda$(argsOrOptions, body) {\n    /* ^lambda src/core.sibilant:113:0 */\n  \n    var body = Array.prototype.slice.call(arguments, 1);\n  \n    (function() {\n      if (sibilant.debug) {\n        return console.log(argsOrOptions);\n      }\n    }).call(this);\n    var args = (argsOrOptions.args || argsOrOptions),\n        body = (argsOrOptions.body || body),\n        args = (function() {\n      if (node__QUERY(args, \"expression\")) {\n        return args.contents;\n      } else if ((node__QUERY(args) && 0 === body.length)) {\n        body = [ args ];\n        return [];\n      } else {\n        return args;\n      }\n    }).call(this),\n        name = (function() {\n      if (argsOrOptions.name) {\n        return outputFormatter(transpile(argsOrOptions.name)).replace((new RegExp(\"\\\\W+\", \"g\")), \"$\").concat(\"$\");\n      }\n    }).call(this),\n        rest = detect(args, (function() {\n      /* src/core.sibilant:128:23 */\n    \n      return node__QUERY(arguments[0], \"dots\");\n    }));\n    var thisNode = this,\n        node = detect([ argsOrOptions.node, thisNode, argsOrOptions.name, args, body[0] ], (function(n) {\n      /* src/core.sibilant:133:16 */\n    \n      return (node__QUERY(n) && n.file);\n    }));\n    return [ \"(function\", (function() {\n      if (name) {\n        return (\" \" + name);\n      } else {\n        return \"\";\n      }\n    }).call(this), \"(\", interleave(\", \", map(args, transpile)), \") {\", (function() {\n      if ((argsOrOptions.name || node)) {\n        return indent([ \"/*\", (function() {\n          if (argsOrOptions.name) {\n            return (\" \" + sibilant.prettyPrint(argsOrOptions.name, false));\n          } else {\n            return \"\";\n          }\n        }).call(this), (function() {\n          if (node) {\n            return (\" \" + node.file + \":\" + node.line + \":\" + node.col);\n          } else {\n            return \"\";\n          }\n        }).call(this), \" */\" ]);\n      } else {\n        return \"\";\n      }\n    }).call(this), (function() {\n      if ((typeof rest !== \"undefined\" && rest !== null)) {\n        return indent(asStatement([ \"var \", transpile(rest), \" = Array.prototype.slice.call(arguments, \", (args.length - 1), \")\" ]));\n      }\n    }).call(this), indent(sibilant.macros.namespaces.core.do.apply(this, body)), \"})\" ];\n  });\n  sibilant.macros.namespaces.core[\"#\"] = sibilant.macros.namespaces.core.lambda;\n  sibilant.macros.namespaces.core.quotedHash = (function sibilant$macros$namespaces$core$quotedHash$(pairs) {\n    /* ^quoted-hash src/core.sibilant:151:0 */\n  \n    var pairs = Array.prototype.slice.call(arguments, 0);\n  \n    var cachedQuoteValue = sibilant.quoteHashKeys;\n    sibilant.quoteHashKeys = true;\n    var value = sibilant.macros.namespaces.core.hash.apply(this, pairs);\n    sibilant.quoteHashKeys = cachedQuoteValue;\n    return value;\n  });\n  sibilant.macros.namespaces.core.hash = (function sibilant$macros$namespaces$core$hash$(pairs) {\n    /* ^hash src/core.sibilant:158:0 */\n  \n    var pairs = Array.prototype.slice.call(arguments, 0);\n  \n    (function() {\n      if (1 === (pairs.length % 2)) {\n        return error((\"odd number of key-value pairs in hash: \" + inspect(pairs)));\n      }\n    }).call(this);\n    var quoteKeys = sibilant.quoteHashKeys,\n        pairStrings = bulkMap(pairs, (function(key, value) {\n      /* src/core.sibilant:164:39 */\n    \n      return [ (function() {\n        if ((quoteKeys && !(node__QUERY(key, \"string\")))) {\n          return [ \"\\\"\", transpile(key), \"\\\"\" ];\n        } else {\n          return transpile(key);\n        }\n      }).call(this), \": \", transpile(value) ];\n    }));\n    return (function() {\n      if (1 >= pairStrings.length) {\n        return [ \"{ \", interleave(\", \", pairStrings), \" }\" ];\n      } else {\n        return [ \"{\", indent(interleave(\",\\n\", pairStrings)), \"}\" ];\n      }\n    }).call(this);\n  });\n  var replace__BANG = (function replace__BANG$(content) {\n    /* replace! src/core.sibilant:174:0 */\n  \n    return (function() {\n      if ((node__QUERY(content, \"dots\") && 3 === content.token.length && node__QUERY(content.contents[0], \"at\"))) {\n        return mergeInto(clone(content), { contents: [ transpile(content.contents[0]) ] });\n      } else if (node__QUERY(content, \"at\")) {\n        return transpile(content.contents[0]);\n      } else if (node__QUERY(content, \"tick\")) {\n        return JSON.stringify(content);\n      } else if ((\"object\" === typeof content && content !== null && content.constructor.name !== \"Array\")) {\n        return sibilant.macros.namespaces.core.hash.apply(this, Object.keys(content).reduce((function() {\n          /* src/core.sibilant:191:21 */\n        \n          return arguments[0].concat([ arguments[1], replace__BANG(content[arguments[1]]) ]);\n        }), []));\n      } else if (((content) && typeof (content) === \"object\" && (content).constructor.name === \"Array\")) {\n        return sibilant.macros.namespaces.core.list.apply(this, map(content, replace__BANG));\n      } else if (typeof content === \"undefined\") {\n        return \"undefined\";\n      } else if (typeof content === \"number\") {\n        return content.toString();\n      } else {\n        return JSON.stringify(content);\n      }\n    }).call(this);\n  });\n  var prettyLogAndReturn = (function prettyLogAndReturn$(content) {\n    /* pretty-log-and-return src/core.sibilant:206:0 */\n  \n    console.log(sibilant.prettyPrint(content));\n    return content;\n  });\n  sibilant.macros.namespaces.core.quote = (function sibilant$macros$namespaces$core$quote$(content) {\n    /* ^quote src/core.sibilant:210:0 */\n  \n    var unquotes = findUnquotes(content);\n    return (function() {\n      if (typeof content === \"string\") {\n        return (\"\\\"\" + qescape(content) + \"\\\"\");\n      } else if (typeof content === \"number\") {\n        return sibilant.macros.namespaces.core.quote(content.toString());\n      } else if (node__QUERY(content, \"literal\", \"otherChar\")) {\n        return [ \"\\\"\", transpile(content), \"\\\"\" ];\n      } else if (Object.keys(unquotes).length) {\n        return replace__BANG(content, unquotes);\n      } else if (node__QUERY(content, \"expression\")) {\n        return [ \"\\\"\", mapNode(transpile(content), qescape), \"\\\"\" ];\n      } else if (node__QUERY(content, \"bracket\")) {\n        return sibilant.macros.namespaces.core.list.apply(this, map(content.contents, sibilant.macros.namespaces.core.quote));\n      } else if (node__QUERY(content, \"brace\")) {\n        return sibilant.macros.namespaces.core.hash.apply(this, map(content.contents, sibilant.macros.namespaces.core.quote));\n      } else {\n        console.log((\"unknown content\" + inspect(content)));\n        return content;\n      }\n    }).call(this);\n  });\n  sibilant.macros.namespaces.core.debug = (function sibilant$macros$namespaces$core$debug$(val) {\n    /* ^debug src/core.sibilant:233:0 */\n  \n    sibilant.debug = eval(outputFormatter(transpile(val)));\n    return null;\n  });\n  sibilant.macros.namespaces.core.expandQuote = (function sibilant$macros$namespaces$core$expandQuote$(node, expansions) {\n    /* ^expand-quote src/core.sibilant:236:0 */\n  \n    return transpile(mapNodeForQuoteExpansion((function() {\n      if (node__QUERY(node)) {\n        return node;\n      } else {\n        return sibilant.nodeCache[node];\n      }\n    }).call(this), expansions));\n  });\n  sibilant.macros.namespaces.core.list = (function sibilant$macros$namespaces$core$list$(args) {\n    /* ^list src/core.sibilant:242:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 0);\n  \n    var argSegments = [];\n    return (function() {\n      if (0 === args.length) {\n        return \"[]\";\n      } else {\n        var simpleList = (function simpleList$(args) {\n          /* simple-list src/core.sibilant:246:12 */\n        \n          return [ \"[ \", interleave(\", \", map(args, (function(arg) {\n            /* src/core.sibilant:247:50 */\n          \n            return arg.transpiled;\n          }))), \" ]\" ];\n        });\n        args.forEach((function(arg) {\n          /* src/core.sibilant:249:27 */\n        \n          return (function() {\n            if (node__QUERY(arg, \"dots\")) {\n              return argSegments.push({ transpiled: transpile(arg) });\n            } else if (((argSegments.slice(-1)[0]) && typeof (argSegments.slice(-1)[0]) === \"object\" && (argSegments.slice(-1)[0]).constructor.name === \"Array\")) {\n              return argSegments.slice(-1)[0].push({ transpiled: transpile(arg) });\n            } else {\n              return argSegments.push([ { transpiled: transpile(arg) } ]);\n            }\n          }).call(this);\n        }));\n        argSegments = map(argSegments, (function(segment) {\n          /* src/core.sibilant:255:38 */\n        \n          return (function() {\n            if (((segment) && typeof (segment) === \"object\" && (segment).constructor.name === \"Array\")) {\n              return simpleList(segment);\n            } else {\n              return segment.transpiled;\n            }\n          }).call(this);\n        }));\n        return (function() {\n          if (1 === argSegments.length) {\n            return argSegments[0];\n          } else {\n            return [ argSegments[0], \".concat(\", interleave(\", \", argSegments.slice(1)), \")\" ];\n          }\n        }).call(this);\n      }\n    }).call(this);\n  });\n  sibilant.macros.namespaces.core.call = (function sibilant$macros$namespaces$core$call$(fnName, args) {\n    /* ^call src/core.sibilant:265:0 */\n  \n    var args = Array.prototype.slice.call(arguments, 1);\n  \n    return (function() {\n      if (any__QUERY(args, (function() {\n        /* src/core.sibilant:266:20 */\n      \n        return node__QUERY(arguments[0], \"dots\");\n      }))) {\n        return macros.apply(fnName, macros.list.apply(this, args));\n      } else {\n        return [ transpile(fnName), \"(\", interleave(\", \", map(args, transpile)), \")\" ];\n      }\n    }).call(this);\n  });\n  sibilant.macros.namespaces.core.dots = (function sibilant$macros$namespaces$core$dots$(contents) {\n    /* ^dots src/core.sibilant:271:0 */\n  \n    var contents = Array.prototype.slice.call(arguments, 0);\n  \n    return transpile(contents);\n  });\n  sibilant.macros.namespaces.core.include = (function sibilant$macros$namespaces$core$include$(files) {\n    /* ^include src/core.sibilant:274:0 */\n  \n    var files = Array.prototype.slice.call(arguments, 0);\n  \n    return interleave(files.map((function(file) {\n      /* src/core.sibilant:276:17 */\n    \n      return sibilant.withDefaultSearchPath((function() {\n        /* src/core.sibilant:278:20 */\n      \n        return sibilant.include(eval(outputFormatter(transpile(file))));\n      }));\n    })), \"\\n\");\n  });\n  sibilant.macros.namespaces.core.docs = (function sibilant$macros$namespaces$core$docs$(options) {\n    /* ^docs src/core.sibilant:285:0 */\n  \n    var options = Array.prototype.slice.call(arguments, 0);\n  \n    var optionsString = undefined,\n        optionsHash = {  };\n    (function() {\n      if (1 === (options.length % 2)) {\n        return (function() {\n          if ((node__QUERY(options[0], \"string\") || typeof options[0] === \"string\")) {\n            return optionsString = options.shift();\n          } else if ((node__QUERY(options.slice(-1)[0], \"string\") || typeof options.slice(-1)[0] === \"string\")) {\n            return optionsString = options.pop();\n          }\n        }).call(this);\n      }\n    }).call(this);\n    bulkMap(options, (function(key, value) {\n      /* src/core.sibilant:296:23 */\n    \n      return optionsHash[outputFormatter(transpile(key))] = value;\n    }));\n    [ \"examples\", \"references\" ].forEach((function(listAttribute) {\n      /* src/core.sibilant:299:5 */\n    \n      return (function() {\n        if ((optionsHash.hasOwnProperty(listAttribute) && node__QUERY(optionsHash[listAttribute], \"bracket\"))) {\n          return optionsHash[listAttribute] = optionsHash[listAttribute].contents;\n        }\n      }).call(this);\n    }));\n    (function() {\n      if (optionsHash.hasOwnProperty(\"example\")) {\n        (function() {\n          if (optionsHash.hasOwnProperty(\"examples\")) {\n            return error(\"please provide example OR examples, not both\");\n          }\n        }).call(this);\n        optionsHash.examples = [ optionsHash.example ];\n        return delete optionsHash.example;\n      }\n    }).call(this);\n    (function() {\n      if (optionsHash.hasOwnProperty(\"tags\")) {\n        return optionsHash.tags = eval(outputFormatter(transpile(sibilant.macros.namespaces.core.quote(optionsHash.tags))));\n      }\n    }).call(this);\n    (function() {\n      if (node__QUERY(optionsString, \"string\")) {\n        return optionsHash.docString = eval(outputFormatter(transpile(optionsString)));\n      } else if (typeof optionsString === \"string\") {\n        return optionsHash.docString = optionsString;\n      }\n    }).call(this);\n    sibilant.docs.lastDoc = optionsHash;\n    return null;\n  });\n  var node__QUERY = (function node__QUERY$(thing, types) {\n    /* node? src/transpiler.sibilant:1:0 */\n  \n    var types = Array.prototype.slice.call(arguments, 1);\n  \n    return ((typeof thing !== \"undefined\" && thing !== null) && \"object\" === typeof thing && typeof thing.type === \"string\" && (0 === types.length || types.indexOf(thing.type) !== -1) && thing.hasOwnProperty(\"contents\"));\n  });\n  var emptyNode__QUERY = (function emptyNode__QUERY$(item) {\n    /* empty-node? src/transpiler.sibilant:9:0 */\n  \n    return (function() {\n      if (node__QUERY(item)) {\n        return emptyNode__QUERY(item.contents);\n      } else if (((item) && typeof (item) === \"object\" && (item).constructor.name === \"Array\")) {\n        return all__QUERY(item, emptyNode__QUERY);\n      } else if (typeof item === \"string\") {\n        return item.match((new RegExp(\"^\\\\s*$\", undefined)));\n      } else {\n        return (null === item || typeof item === \"undefined\" || false === item);\n      }\n    }).call(this);\n  });\n  var compactNode = (function compactNode$(item) {\n    /* compact-node src/transpiler.sibilant:17:0 */\n  \n    return (function() {\n      if (node__QUERY(item)) {\n        item.contents = compactNode(item.contents);\n        return (function() {\n          if ((item.contents && item.contents.length)) {\n            return item;\n          } else {\n            return null;\n          }\n        }).call(this);\n      } else if (((item) && typeof (item) === \"object\" && (item).constructor.name === \"Array\")) {\n        var compacted = compact(map(item, compactNode));\n        return (function() {\n          if ((compacted && compacted.length)) {\n            return compacted;\n          } else {\n            return null;\n          }\n        }).call(this);\n      } else {\n        return (function() {\n          if ((item === \"\" || item === false)) {\n            return null;\n          } else {\n            return item;\n          }\n        }).call(this);\n      }\n    }).call(this);\n  });\n  var recurseTranspile = (function recurseTranspile$(node) {\n    /* recurse-transpile src/transpiler.sibilant:26:0 */\n  \n    return (function() {\n      if (((node) && typeof (node) === \"object\" && (node).constructor.name === \"Array\")) {\n        return map(node, recurseTranspile);\n      } else if (node__QUERY(node, \"output\")) {\n        return mergeInto(node, { contents: recurseTranspile(node.contents) });\n      } else if (node__QUERY(node)) {\n        return transpile(node);\n      } else {\n        return node;\n      }\n    }).call(this);\n  });\n  var transpile = (function transpile$(node, preprocessor) {\n    /* transpile src/transpiler.sibilant:38:0 */\n  \n    (function() {\n      if (typeof node === \"string\") {\n        return node = {\n          type: \"js\",\n          token: node,\n          contents: []\n        };\n      } else if (typeof node === \"number\") {\n        return node = {\n          type: \"number\",\n          token: node.toString(),\n          contents: []\n        };\n      }\n    }).call(this);\n    return (function() {\n      if (((node) && typeof (node) === \"object\" && (node).constructor.name === \"Array\")) {\n        return node;\n      } else if ((typeof node !== \"undefined\" && node !== null)) {\n        var transpiler = (transpile[node.type] || transpile.default),\n            result = transpiler(node),\n            resultNode = recurseTranspile((function() {\n          if (node__QUERY(result)) {\n            return result;\n          } else {\n            return {\n              contents: result,\n              type: \"output\"\n            };\n          }\n        }).call(this));\n        (function() {\n          if (typeof resultNode === \"undefined\") {\n            console.log((\"\" + node.file + \":\" + node.line + \":\" + node.col + \"\\n\" + prettify(node) + \"\"));\n            console.log(prettify(result));\n            console.log(prettify(transpile(result)));\n            throw (new Error((\"Encountered an undefined return from recursive transpile.\\n\" + \"Please report this bug at \" + \"https://github.com/jbr/sibilant/issues/new\")))\n          }\n        }).call(this);\n        resultNode.contents = compact(flatten(resultNode.contents));\n        resultNode.source = node;\n        (function() {\n          if (5 > sibilant.debug) {\n            return console.log(prettify(node), red(\"->\"), prettify(resultNode));\n          }\n        }).call(this);\n        return (function() {\n          if (emptyNode__QUERY(resultNode)) {\n            return undefined;\n          } else {\n            return resultNode;\n          }\n        }).call(this);\n      }\n    }).call(this);\n  });\n  sibilant.transpile = transpile;\n  var readerMacros = {  };\n  transpile.hat = (function transpile$hat$(node) {\n    /* transpile.hat src/transpiler.sibilant:85:0 */\n  \n    var token = node.contents[0].token,\n        $_symbol6_$ = (function() {\n      if (token.match((new RegExp(\"\\/\", undefined)))) {\n        return token.split(\"/\");\n      } else {\n        return [ sibilant.macros.searchPath[0], token ];\n      }\n    }).call(this),\n        namespace = $_symbol6_$[0],\n        macro = $_symbol6_$[1],\n        $_symbol6_$ = undefined;\n    return sibilant.macros.namespaces.core.get.call(node, \"sibilant.macros.namespaces\", sibilant.macros.namespaces.core.quote(transpile.literal({ token: namespace })), sibilant.macros.namespaces.core.quote(transpile.literal({ token: macro })));\n  });\n  transpile.tick = (function transpile$tick$(node) {\n    /* transpile.tick src/transpiler.sibilant:96:0 */\n  \n    return sibilant.macros.namespaces.core.quote.apply(node, node.contents);\n  });\n  transpile.at = (function transpile$at$(node) {\n    /* transpile.at src/transpiler.sibilant:99:0 */\n  \n    return transpile(node.contents[0]);\n  });\n  transpile.dots = (function transpile$dots$(node) {\n    /* transpile.dots src/transpiler.sibilant:102:0 */\n  \n    return sibilant.macros.namespaces.core.dots.apply(node, node.contents);\n  });\n  transpile.default = (function transpile$default$(node) {\n    /* transpile.default src/transpiler.sibilant:105:0 */\n  \n    return node.token;\n  });\n  transpile.output = (function transpile$output$(node) {\n    /* transpile.output src/transpiler.sibilant:108:0 */\n  \n    return node;\n  });\n  transpile.number = (function transpile$number$(node) {\n    /* transpile.number src/transpiler.sibilant:111:0 */\n  \n    return parseFloat(node.token.replace((new RegExp(\",\", \"g\")), \"\")).toString();\n  });\n  transpile.root = (function transpile$root$(node) {\n    /* transpile.root src/transpiler.sibilant:117:0 */\n  \n    return (function() {\n      if (1 === node.contents.length) {\n        return transpile(node.contents[0]);\n      } else {\n        return interleave(compact(map(node.contents, asStatement)), \"\\n\");\n      }\n    }).call(this);\n  });\n  transpile.expression = (function transpile$expression$(node, preprocessor) {\n    /* transpile.expression src/transpiler.sibilant:126:0 */\n  \n    return (function() {\n      if (node.contents.length) {\n        var head = node.contents[0],\n            args = node.contents,\n            macro = sibilant.resolveMacro(\"call\");\n        (function() {\n          if (node__QUERY(head, \"string\")) {\n            return macro = sibilant.resolveMacro(\"concat\");\n          } else if (node__QUERY(head, \"dots\")) {\n            macro = sibilant.resolveMacro(\"send\");\n            return args = [ node.contents[1], head.contents[0] ].concat(node.contents.slice(2));\n          } else if (node__QUERY(head, \"literal\", \"otherChar\")) {\n            var resolvedMacro = sibilant.resolveMacro(outputFormatter(transpile(head)));\n            return (function() {\n              if (resolvedMacro) {\n                head.hint = \"macro\";\n                macro = resolvedMacro;\n                return args = node.contents.slice(1);\n              }\n            }).call(this);\n          }\n        }).call(this);\n        return macro.apply(node, args);\n      } else {\n        return \"null\";\n      }\n    }).call(this);\n  });\n  transpile.bracket = (function transpile$bracket$(node) {\n    /* transpile.bracket src/transpiler.sibilant:152:0 */\n  \n    return sibilant.macros.namespaces.core.list.apply(this, node.contents);\n  });\n  transpile.brace = (function transpile$brace$(node) {\n    /* transpile.brace src/transpiler.sibilant:155:0 */\n  \n    return sibilant.macros.namespaces.core.hash.apply(this, node.contents);\n  });\n  transpile.literal = (function transpile$literal$(node) {\n    /* transpile.literal src/transpiler.sibilant:157:0 */\n  \n    var string = node.token;\n    return inject(string.replace((new RegExp(\"\\\\*\", \"g\")), \"_\").replace((new RegExp(\"\\\\?$\", undefined)), \"__QUERY\").replace((new RegExp(\"!$\", undefined)), \"__BANG\"), string.match((new RegExp(\"-(.)\", \"g\"))), (function(returnString, match) {\n      /* src/transpiler.sibilant:164:13 */\n    \n      return returnString.replace(match, match[1].toUpperCase());\n    }));\n  });\n  transpile.string = (function transpile$string$(node) {\n    /* transpile.string src/transpiler.sibilant:168:0 */\n  \n    return node.token.split(\"\\n\").join(\"\\\\n\\\" +\\n\\\"\");\n  });\n  transpile.comment = (function transpile$comment$(node) {\n    /* transpile.comment src/transpiler.sibilant:173:0 */\n  \n    return null;\n  });\n  var docs = sibilant.docs = {\n    definitions: [],\n    undocumented: {  }\n  };\n  docs.record = (function docs$record$(type, namespace, name, node) {\n    /* docs.record src/docs.sibilant:4:0 */\n  \n    var doc = docs.lastDoc;\n    (function() {\n      if (typeof doc !== \"undefined\") {\n        delete sibilant.docs.undocumented[name];\n        return sibilant.docs.definitions.push(mergeInto(doc, {\n          name: name,\n          type: type,\n          namespace: namespace,\n          definition: node\n        }));\n      } else {\n        return sibilant.docs.undocumented[name] = true;\n      }\n    }).call(this);\n    return delete sibilant.docs.lastDoc;\n  });\n  docs.tags = (function docs$tags$() {\n    /* docs.tags src/docs.sibilant:16:0 */\n  \n    var tags = flatten(pluck(docs.definitions, \"tags\")),\n        counts = {  };\n    tags.forEach((function(tag) {\n      /* src/docs.sibilant:19:5 */\n    \n      return counts[tag] = ((counts[tag] || 0) + 1);\n    }));\n    return counts;\n  });\n  docs.text = (function docs$text$() {\n    /* docs.text src/docs.sibilant:27:0 */\n  \n    return docs.definitions.map((function(definition) {\n      /* src/docs.sibilant:29:15 */\n    \n      return (\"name: \" + definition.type + \" \" + definition.namespace + \"/\" + prettify(definition.name) + \"\\n\" + \"description: \" + definition.docString + \"\\n\" + (function() {\n        if (definition.references) {\n          return (\"references:\\n  \" + (definition.references.map((function() {\n            /* src/docs.sibilant:35:51 */\n          \n            return eval(outputFormatter(transpile(arguments[0])));\n          })).join(\"\\n  \") + \"\\n\"));\n        } else {\n          return \"\";\n        }\n      }).call(this) + (function() {\n        if (definition.tags) {\n          return (\"tags: \" + definition.tags.join(\", \") + \"\\n\");\n        } else {\n          return \"\";\n        }\n      }).call(this) + \"arguments: \" + prettify(definition.definition.contents[2]) + \"\\n\" + \"examples: \\n\" + (definition.examples || []).map((function() {\n        /* src/docs.sibilant:46:43 */\n      \n        return (prettify(arguments[0], true) + \"\\n\" + outputFormatter(transpile(arguments[0])));\n      })).join(\"\\n\\n\") + \"\\n\\n\");\n    })).join(\"\");\n  });\n  docs.textNoColor = (function docs$textNoColor$() {\n    /* docs.text-no-color src/docs.sibilant:53:0 */\n  \n    var stripAnsi = __webpack_require__(765);\n    return stripAnsi(docs.text());\n  });\n  docs.json = (function docs$json$() {\n    /* docs.json src/docs.sibilant:58:0 */\n  \n    return JSON.stringify(docs.data());\n  });\n  docs.data = (function docs$data$() {\n    /* docs.data src/docs.sibilant:61:0 */\n  \n    return docs.definitions.map((function(definition) {\n      /* src/docs.sibilant:63:6 */\n    \n      return {\n        name: prettify(definition.name, false),\n        namespace: definition.namespace,\n        type: definition.type,\n        description: definition.docString,\n        references: (function() {\n          if (definition.references) {\n            return definition.references.map((function() {\n              /* src/docs.sibilant:69:52 */\n            \n              return arguments[0].token.slice(1, -1);\n            }));\n          } else {\n            return [];\n          }\n        }).call(this),\n        arguments: definition.definition.contents[2].contents.map((function() {\n          /* src/docs.sibilant:74:30 */\n        \n          return prettify(arguments[0], false);\n        })),\n        definition: prettify(definition.definition, false),\n        examples: (definition.examples || []).map((function() {\n          /* src/docs.sibilant:77:29 */\n        \n          return {\n            javascript: outputFormatter(transpile(arguments[0])),\n            sibilant: prettify(arguments[0], false)\n          };\n        })),\n        tags: definition.tags\n      };\n    }));\n  });\n  var sibilize = (function sibilize$(input) {\n    /* sibilize src/require-and-include.sibilant:1:0 */\n  \n    var result = outputFormatter(transpile(restructure(parse(input))));\n    return result;\n  });\n  var sourcemap = (function sourcemap$(input) {\n    /* sourcemap src/require-and-include.sibilant:9:0 */\n  \n    return sourcemapper(transpile(restructure(parse(input))));\n  });\n  sibilant.sibilize = sibilize;\n  sibilant.version = (function sibilant$version$() {\n    /* sibilant.version src/require-and-include.sibilant:14:0 */\n  \n    return sibilant.packageInfo().version;\n  });\n  sibilant.stripShebang = (function sibilant$stripShebang$(data) {\n    /* sibilant.strip-shebang src/require-and-include.sibilant:17:0 */\n  \n    return data.replace((new RegExp(\"^#!.*\\\\n\", undefined)), \"\\n\");\n  });\n  sibilant.file = \"eval.sibilant\";\n  var withDirAndFile = (function withDirAndFile$(dir, file, fn) {\n    /* with-dir-and-file src/require-and-include.sibilant:22:0 */\n  \n    var before = {\n      dir: sibilant.dir,\n      file: sibilant.file\n    };\n    sibilant.dir = dir;\n    sibilant.file = file;\n    var retval = fn();\n    sibilant.dir = before.dir;\n    sibilant.file = before.file;\n    return retval;\n  });\n  sibilant.sourceCache = {  };\n  sibilant.sibilizeFile = (function sibilant$sibilizeFile$(fileName) {\n    /* sibilant.sibilize-file src/require-and-include.sibilant:39:0 */\n  \n    return outputFormatter(sibilant.transpileFile(fileName));\n  });\n  sibilant.sibilizeJson = (function sibilant$sibilizeJson$(fileName) {\n    /* sibilant.sibilize-json src/require-and-include.sibilant:44:0 */\n  \n    var before = sibilant.quoteHashKeys;\n    sibilant.quoteHashKeys = true;\n    var content = sibilant.sibilizeFile(fileName);\n    sibilant.quoteHashKeys = before;\n    return content;\n  });\n  var package = {\n    name: \"sibilant\",\n    version: \"0.4.0\",\n    keywords: [ \"lisp\", \"javascript\", \"language\" ],\n    description: \"javascript with a lisp\",\n    contributors: [ \"Jacob Rothstein <hi@jbr.me> (http://jbr.me)\", \"Matthew Phillips (http://www.matthewphillips.info/)\", \"Yuest Wang (http://yue.st/)\", \"Lyndon Tremblay (http://www.hoovy.org)\", \"David Sargeant (https://github.com/dubiousdavid)\" ],\n    repository: {\n      type: \"git\",\n      url: \"http://github.com/jbr/sibilant.git\"\n    },\n    bugs: {\n      mail: \"sibilant@librelist.com\",\n      url: \"http://github.com/jbr/sibilant/issues\"\n    },\n    bin: { sibilant: \"./bin/sibilant\" },\n    main: \"./lib/sibilant.js\",\n    license: \"MIT\",\n    devDependencies: {\n      stool: \">=0.0.7\",\n      diff: \">=2.2.1\",\n      stripAnsi: \">=3.0.0\",\n      colors: \">=1.1.2\",\n      cardinal: \">=0.6.0\"\n    },\n    dependencies: {\n      \"source-map\": \">=0.5.3\",\n      \"source-map-support\": \">=0.3.3\"\n    },\n    scripts: { test: \"bin/sibilant -x stool.sibilant -- test\" }\n  };\n  sibilant.packageInfo = (function sibilant$packageInfo$() {\n    /* sibilant.package-info src/browser.sibilant:25:6 */\n  \n    return package;\n  });\n  sibilant.versionString = (function sibilant$versionString$() {\n    /* sibilant.version-string src/browser.sibilant:27:6 */\n  \n    return (package.name + \" browser version \" + package.version);\n  });\n  sibilant.dir = \"browser\";\n  sibilant.initialize = (function sibilant$initialize$() {\n    /* sibilant.initialize src/browser.sibilant:32:6 */\n  \n    return false;\n  });\n  var evalCode = (function evalCode$(js) {\n    /* eval-code src/browser.sibilant:33:13 */\n  \n    return (new Function(js))();\n  });\n  sibilant.include = (function sibilant$include$(url) {\n    /* sibilant.include src/browser.sibilant:36:6 */\n  \n    return $.get(url).done((function() {\n      /* src/browser.sibilant:37:32 */\n    \n      return evalCode(sibilize(arguments[0]));\n    }));\n  });\n  (function() {\n    if (typeof $ === \"function\") {\n      return $((function() {\n        /* src/browser.sibilant:40:15 */\n      \n        return map($.makeArray($(\"script[type=\\\"application/sibilant\\\"][src]\").map((function() {\n          /* src/browser.sibilant:43:26 */\n        \n          return this.src;\n        }))), sibilant.include);\n      }));\n    }\n  }).call(this);\n  return sibilant;\n}).call(this);\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sibilant/lib/browser.js\n ** module id = 764\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/sibilant/lib/browser.js?");

/***/ },

/***/ 765:
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\nvar ansiRegex = __webpack_require__(766)();\n\nmodule.exports = function (str) {\n\treturn typeof str === 'string' ? str.replace(ansiRegex, '') : str;\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/strip-ansi/index.js\n ** module id = 765\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/strip-ansi/index.js?");

/***/ },

/***/ 766:
/***/ function(module, exports) {

	eval("'use strict';\nmodule.exports = function () {\n\treturn /[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ansi-regex/index.js\n ** module id = 766\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/ansi-regex/index.js?");

/***/ }

/******/ });