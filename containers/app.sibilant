(include "../macros.sibilant")
(import-namespace react)

(var { Component PropTypes } React
     { connect } (require "react-redux")
     { set-filter } (require "../actions.sibilant")
     { Router Route Link } (require "react-router")
     { push-path } (require "redux-simple-router")
     values (require "lodash/object/values")
     *sort-by (require "lodash/collection/sortBy"))

(import-classes (require "../components/doc-listing.sibilant") DocListing)
(import-classes (require "../components/header.sibilant") Header)
(import-classes (require "../components/footer.sibilant") Footer)

(def-class App
           (var { on-filter-change tags docs filter doc-names } this.props)
           (div
            (Header on-filter-change on-filter-change,
                    tags tags,
                    filter filter,
                    docs docs)
            (DocListing on-filter-change on-filter-change,
                    tags tags,
                    filter filter,
                    docs docs
                    doc-names doc-names)
            (Footer)))

(def select-docs (docs filter)
     (if (as-boolean filter)
         (|> docs
             (values)
             (.filter (#(doc)
                        (or (|> doc.tags (includes? filter))
                            (|> doc.name (match-regex? ("^" filter)))))))

         (values docs)))

(def sort-docs (docs-as-array)
     (|> docs-as-array (*sort-by (#-> (get 'tags) (includes? 'deprecated))
                                 (#-> (get 'tags) (first))
                                 'name)))

(def map-state-to-props (state props)
     (var filter (or props.route-params.filter state.filter ""))
     { docs (|> state.docs-by-name (select-docs filter) (or []) (sort-docs))
       tags (|> state.tags (or {}))
       doc-names state.doc-names
       filter filter  })


(def map-dispatch-to-props (dispatch)
     { on-filter-change (#>
                         (dispatch (push-path (ternary #0 ("/" #0) "/")))) })

(set exports 'App ((connect map-state-to-props map-dispatch-to-props)
                   App))


