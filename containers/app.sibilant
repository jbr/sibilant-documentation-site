(include "../macros.sibilant")
(import-namespace react)

(require! { connect } "react-redux"
          { sibilize display-repl evaluate } "../actions.sibilant"
          { Router Route Link } "react-router"
          { route-actions } "react-router-redux"
          { values } "lodash/object"
          lodash-collection "lodash/collection")
            
(var { Component PropTypes } React
     *sort-by lodash-collection.sort-by)

(import-classes!
 { DocListing } "../components/doc-listing.sibilant"
 { Header } "../components/header.sibilant"
 { Footer } "../components/footer.sibilant"
 { REPL } "../components/repl.sibilant")

(def-class App
           (var { on-filter-change tags docs filter
                  doc-names repl sibilize display-repl
                  evaluate } this.props)
           (div
            (REPL repl: repl
                  display-repl display-repl
                  sibilize: sibilize
                  evaluate: evaluate)
            (Header on-filter-change on-filter-change,
                    display-repl display-repl
                    tags tags,
                    filter filter,
                    docs docs)
            (DocListing on-filter-change on-filter-change,
                    tags tags,
                    filter filter,
                    docs docs
                    doc-names doc-names)
            (Footer)))

(def select-docs (docs filter)
     (if (as-boolean filter)
         (|> docs
             (values)
             (.filter (#(doc)
                        (or (|> doc.tags (includes? filter))
                            (|> doc.name (match-regex? ("^" filter)))))))

         (values docs)))

(def sort-docs (docs-as-array)
     (|> docs-as-array (*sort-by (#-> (get 'tags) (includes? 'deprecated))
                                 (#-> (get 'tags) (first))
                                 'name)))

(def map-state-to-props (state props)
     (var filter (or props.route-params.filter state.filter ""))
     { docs (|> state.docs-by-name (select-docs filter) (or []) (sort-docs))
       tags (|> state.tags (or {}))
       repl state.repl
       doc-names state.doc-names
       filter filter  })


(def map-dispatch-to-props (dispatch)
     { sibilize (#-> sibilize dispatch)
       evaluate (#-> evaluate dispatch)
       display-repl (#-> display-repl dispatch)
       on-filter-change (#> (|> (ternary #0 ("/" #0) "/") route-actions.push dispatch)) })

(set exports 'App ((connect map-state-to-props map-dispatch-to-props)
                   App))


